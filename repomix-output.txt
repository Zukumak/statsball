This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-08T12:37:18.106Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
backend/
  api/
    management/
      commands/
        update_standings.py
    migrations/
      0001_initial.py
      0002_league_team_standings.py
      0003_rename_teams_standings_team.py
      0004_rename_team_standings_teams.py
      0005_remove_team_draw_remove_team_goaldifference_and_more.py
    admin.py
    apps.py
    models.py
    serializers.py
    tests.py
    urls.py
    views.py
  backend/
    asgi.py
    settings.py
    urls.py
    wsgi.py
  manage.py
frontend/
  public/
    index.html
    manifest.json
    robots.txt
  src/
    components/
      FootballPitch.css
      Home.js
      LeagueOverview.js
      LeagueSelection.css
      MatchDetails.js
      Navigation.js
      TouchesInMatch.js
    services/
      api.js
    App.css
    App.js
    App.test.js
    index.css
    index.js
    logo.svg
    reportWebVitals.js
    setupTests.js
  .gitignore
  package.json
  README.md
statsbombpy-master/
  .github/
    ISSUE_TEMPLATE/
      config.yml
      ISSUE-FORM.yml
  statsbombpy/
    api_client.py
    config.py
    entities.py
    helpers.py
    public.py
    sb.py
  tests/
    statsbombpy_test/
      test_sb.py
  .gitignore
  README.md
  setup.py
.gitignore
README.md

================================================================
Repository Files
================================================================

================
File: backend/api/management/commands/update_standings.py
================
import requests
from django.core.management.base import BaseCommand
from api.models import Team, TeamParticipation, League
from decouple import config

class Command(BaseCommand):
    help = 'Fetch and update league standings'

    leagues_dict = {
        'PL': 'Premier League',
        'BL1': 'Bundesliga',
        'CL': 'Champions League',
        # Add more leagues as needed
    }

    def handle(self, *args, **kwargs):
        for code, name in self.leagues_dict.items():
            url = f'https://api.football-data.org/v4/competitions/{code}/standings'
            headers = {
                "X-Auth-Token": config('FOOTBALL_API_KEY')
            }
            response = requests.get(url, headers=headers)

            if response.status_code == 200:
                data = response.json()

                # Create or get the league
                league, created = League.objects.get_or_create(
                    code=code,
                    defaults={'name': name, 'emblem': data['competition']['emblem']}
                )

                for team_data in data['standings'][0]['table']:
                    # Create or get the team
                    team, created = Team.objects.get_or_create(
                        name=team_data['team']['name'],
                        defaults={'crest': team_data['team']['crest'], 
                                  'short_name': team_data['team'].get('shortName', '')}
                    )

                    # Update or create participation record
                    TeamParticipation.objects.update_or_create(
                        team=team,
                        league=league,
                        defaults={
                            'position': team_data['position'],
                            'playedGames': team_data['playedGames'],
                            'won': team_data['won'],
                            'draw': team_data['draw'],
                            'lost': team_data['lost'],
                            'points': team_data['points'],
                            'goalDifference': team_data['goalDifference']
                        }
                    )

                self.stdout.write(self.style.SUCCESS(f'Standings for {name} updated successfully!'))
            else:
                self.stdout.write(self.style.ERROR(f'Failed to fetch standings for {name}'))

================
File: backend/api/migrations/0001_initial.py
================
# Generated by Django 5.1.2 on 2024-10-17 04:01

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('nationality', models.CharField(max_length=100)),
            ],
        ),
    ]

================
File: backend/api/migrations/0002_league_team_standings.py
================
# Generated by Django 5.1.2 on 2024-10-18 05:47

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('emblem', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('short_name', models.CharField(blank=True, max_length=50, null=True)),
                ('crest', models.URLField()),
                ('position', models.IntegerField()),
                ('playedGames', models.IntegerField()),
                ('won', models.IntegerField()),
                ('draw', models.IntegerField()),
                ('lost', models.IntegerField()),
                ('points', models.IntegerField()),
                ('goalDifference', models.IntegerField()),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='api.league')),
            ],
        ),
        migrations.CreateModel(
            name='Standings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season', models.CharField(max_length=100)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='standings', to='api.league')),
                ('teams', models.ManyToManyField(related_name='standings', to='api.team')),
            ],
        ),
    ]

================
File: backend/api/migrations/0003_rename_teams_standings_team.py
================
# Generated by Django 5.1.2 on 2024-10-18 06:21

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0002_league_team_standings'),
    ]

    operations = [
        migrations.RenameField(
            model_name='standings',
            old_name='teams',
            new_name='team',
        ),
    ]

================
File: backend/api/migrations/0004_rename_team_standings_teams.py
================
# Generated by Django 5.1.2 on 2024-10-18 06:28

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0003_rename_teams_standings_team'),
    ]

    operations = [
        migrations.RenameField(
            model_name='standings',
            old_name='team',
            new_name='teams',
        ),
    ]

================
File: backend/api/migrations/0005_remove_team_draw_remove_team_goaldifference_and_more.py
================
# Generated by Django 5.1.2 on 2024-10-18 07:06

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0004_rename_team_standings_teams'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='team',
            name='draw',
        ),
        migrations.RemoveField(
            model_name='team',
            name='goalDifference',
        ),
        migrations.RemoveField(
            model_name='team',
            name='league',
        ),
        migrations.RemoveField(
            model_name='team',
            name='lost',
        ),
        migrations.RemoveField(
            model_name='team',
            name='playedGames',
        ),
        migrations.RemoveField(
            model_name='team',
            name='points',
        ),
        migrations.RemoveField(
            model_name='team',
            name='position',
        ),
        migrations.RemoveField(
            model_name='team',
            name='won',
        ),
        migrations.CreateModel(
            name='TeamParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField()),
                ('playedGames', models.IntegerField()),
                ('won', models.IntegerField()),
                ('draw', models.IntegerField()),
                ('lost', models.IntegerField()),
                ('points', models.IntegerField()),
                ('goalDifference', models.IntegerField()),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participations', to='api.league')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participations', to='api.team')),
            ],
            options={
                'unique_together': {('team', 'league')},
            },
        ),
        migrations.AlterField(
            model_name='standings',
            name='teams',
            field=models.ManyToManyField(related_name='standings', to='api.teamparticipation'),
        ),
    ]

================
File: backend/api/admin.py
================
from django.contrib import admin
from .models import League, Team, TeamParticipation, Standings

@admin.register(League)
class LeagueAdmin(admin.ModelAdmin):
    list_display = ('name', 'code', 'emblem')
    search_fields = ('name', 'code')


@admin.register(Team)
class TeamAdmin(admin.ModelAdmin):
    list_display = ('name', 'short_name', 'crest')
    search_fields = ('name', 'short_name')


@admin.register(TeamParticipation)
class TeamParticipationAdmin(admin.ModelAdmin):
    list_display = ('team', 'league', 'position', 'playedGames', 'won', 'draw', 'lost', 'points', 'goalDifference')
    list_filter = ('league',)
    search_fields = ('team__name', 'league__name')

@admin.register(Standings)
class StandingsAdmin(admin.ModelAdmin):
    list_display = ('league', 'season', 'updated_at')
    list_filter = ('league',)
    search_fields = ('league__name', 'season')

================
File: backend/api/apps.py
================
from django.apps import AppConfig


class ApiConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'api'

================
File: backend/api/models.py
================
from django.db import models

# Create your models here.

class Player(models.Model):
    name = models.CharField(max_length=100)
    nationality = models.CharField(max_length=100)

    def __str__(self):
        return self.name

class League(models.Model): # add flag goals scored etc etc, date time is also wrong, # add season
    name = models.CharField(max_length=100)
    code = models.CharField(max_length=10, unique=True)  # Unique code for the league (e.g., 'PL' for Premier League)
    emblem = models.URLField(null=True, blank=True)  # Optional league emblem URL

    def __str__(self):
        return self.name


class Team(models.Model):
    name = models.CharField(max_length=100)
    short_name = models.CharField(max_length=50, null=True, blank=True)  # Short name for display
    crest = models.URLField()  # URL for team crest

    def __str__(self):
        return self.name


class TeamParticipation(models.Model):
    team = models.ForeignKey(Team, related_name='participations', on_delete=models.CASCADE)
    league = models.ForeignKey(League, related_name='participations', on_delete=models.CASCADE)
    position = models.IntegerField()
    playedGames = models.IntegerField()
    won = models.IntegerField()
    draw = models.IntegerField()
    lost = models.IntegerField()
    points = models.IntegerField()
    goalDifference = models.IntegerField()

    class Meta:
        unique_together = ('team', 'league')  # Ensures one participation record per team-league combo

    def __str__(self):
        return f"{self.team.name} in {self.league.name}"


class Standings(models.Model):
    league = models.ForeignKey(League, related_name='standings', on_delete=models.CASCADE)  # Relation to League
    season = models.CharField(max_length=100)
    updated_at = models.DateTimeField(auto_now=True)  # Tracks when standings were last updated
    teams = models.ManyToManyField(TeamParticipation, related_name='standings')  # Relationship to team participations

    def __str__(self):
        return f"{self.league.name} Standings for {self.season}"

================
File: backend/api/serializers.py
================
from rest_framework import serializers
from .models import Player


class PlayerSerializer(serializers.ModelSerializer):
    class Meta:
        model = Player
        fields = ['id', 'name', 'nationality']

================
File: backend/api/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: backend/api/urls.py
================
from django.urls import path
from .views import (
    CompetitionsView,
    SeasonsView,
    TouchDataView,
    LeagueMatchesView,
    CompetitionInfoView,
    MatchLineupsView
)

urlpatterns = [
    # Core endpoints needed for LeagueOverview component
    path('api/matches/<int:competition_id>/<int:season_id>/',
         LeagueMatchesView.as_view(),
         name='league-matches'),

    path('api/competition-info/<int:competition_id>/<int:season_id>/',
         CompetitionInfoView.as_view(),
         name='competition-info'),

    # Supporting endpoints
    path('api/competitions/',
         CompetitionsView.as_view(),
         name='competitions'),

    path('api/seasons/<int:competition_id>/',
         SeasonsView.as_view(),
         name='seasons'),

    path('api/touches/<int:match_id>/<str:player_name>/',
         TouchDataView.as_view(),
         name='touch-data'),

    path('api/lineups/<int:match_id>/',
         MatchLineupsView.as_view(),
         name='match-lineups'),
]

================
File: backend/api/views.py
================
from rest_framework.views import APIView
from rest_framework.response import Response
from statsbombpy import sb
import pandas as pd
import numpy as np
import logging

logger = logging.getLogger(__name__)


class BaseStatsBombView(APIView):
    def handle_error(self, error, message="An error occurred"):
        logger.error(f"{message}: {str(error)}")
        return Response({
            'error': str(error),
            'message': message
        }, status=500)

    def clean_dataframe(self, df):
        """Clean DataFrame for JSON serialization"""
        # Make a copy to avoid modifying the original
        df = df.copy()

        # Handle the specific columns we know might have issues
        if 'last_updated_360' in df.columns:
            df['last_updated_360'] = df['last_updated_360'].replace({
                                                                    np.nan: None})

        if 'referee' in df.columns:
            df['referee'] = df['referee'].replace({np.nan: None})

        # Ensure all numeric columns are properly handled
        for col in df.select_dtypes(include=np.number).columns:
            df[col] = df[col].replace(
                {np.nan: None, np.inf: None, -np.inf: None})

        # Convert to dictionary and handle any remaining issues
        records = df.to_dict(orient='records')

        # Final cleanup to ensure JSON serialization will work
        clean_records = []
        for record in records:
            clean_record = {}
            for key, value in record.items():
                # Convert numpy integers to Python integers
                if isinstance(value, np.integer):
                    clean_record[key] = int(value)
                # Convert numpy floats to Python floats or None
                elif isinstance(value, np.floating):
                    clean_record[key] = float(
                        value) if not np.isnan(value) else None
                # Keep everything else as is
                else:
                    clean_record[key] = value
            clean_records.append(clean_record)

        return clean_records


class LeagueMatchesView(BaseStatsBombView):
    def get(self, request, competition_id, season_id):
        try:
            logger.info(
                f"Fetching matches for competition {competition_id} and season {season_id}")

            # Get matches
            matches = sb.matches(
                competition_id=competition_id, season_id=season_id)

            if matches is None or matches.empty:
                return Response({'error': 'No matches found'}, status=404)

            # Clean and convert to JSON-safe format
            matches_data = self.clean_dataframe(matches)

            return Response(matches_data)

        except Exception as e:
            logger.error(f"Error fetching matches: {str(e)}")
            return self.handle_error(e, "Failed to fetch matches")


class CompetitionInfoView(BaseStatsBombView):
    def get(self, request, competition_id, season_id):
        try:
            matches = sb.matches(
                competition_id=competition_id, season_id=season_id)

            if matches is None or matches.empty:
                return Response({'error': 'No matches found'}, status=404)

            # Clean the dataframe
            matches_data = self.clean_dataframe(matches)

            if matches_data:
                first_match = matches_data[0]
                return Response({
                    'competition': first_match.get('competition'),
                    'season': first_match.get('season'),
                    'competition_stage': first_match.get('competition_stage')
                })
            return Response({'error': 'No matches found'}, status=404)

        except Exception as e:
            return self.handle_error(e, "Failed to fetch competition info")


class CompetitionsView(BaseStatsBombView):
    def get(self, request):
        try:
            competitions = sb.competitions()
            return Response(competitions.to_dict(orient='records'))
        except Exception as e:
            return self.handle_error(e, "Failed to fetch competitions")


class SeasonsView(BaseStatsBombView):
    def get(self, request, competition_id):
        try:
            competitions = sb.competitions()
            seasons = competitions[competitions['competition_id']
                                   == competition_id]
            return Response(seasons.to_dict(orient='records'))
        except Exception as e:
            return self.handle_error(e, "Failed to fetch seasons")


class TouchDataView(BaseStatsBombView):
    def get(self, request, match_id, player_name):
        try:
            match_events = sb.events(match_id=match_id)

            touch_types = [
                'Pass', 'Ball Receipt*', 'Carry', 'Clearance',
                'Foul Won', 'Block', 'Ball Recovery', 'Duel',
                'Dribble', 'Interception', 'Miscontrol', 'Shot'
            ]

            touches = match_events[
                (match_events['player'] == player_name) &
                (match_events['type'].isin(touch_types))
            ]

            return Response(touches[['type', 'location']].to_dict(orient='records'))
        except Exception as e:
            return self.handle_error(e, "Failed to fetch touch data")


class MatchLineupsView(BaseStatsBombView):
    def get(self, request, match_id):
        try:
            logger.info(f"Fetching lineups for match {match_id}")

            # Fetch lineups for the specified match
            lineups = sb.lineups(match_id=match_id)
            
            if not lineups:
                return Response({'error': 'No lineup data found'}, status=404)

            # Process each team's lineup
            processed_lineups = {}
            for team_name, team_data in lineups.items():
                processed_players = []
                
                # Iterate through each player in the lineup
                for player_index in range(len(team_data)):
                    player = team_data.iloc[player_index]
                    
                    # Capture relevant player details
                    player_info = {
                        'player_id': player['player_id'],
                        'player_name': player['player_name'],
                        'nickname': player['player_nickname'] if 'player_nickname' in player else None,
                        'jersey_number': player['jersey_number'],
                        'country': player['country'],
                        'positions': player['positions']
                    }
                    
                    # Capture card information if available
                    if 'cards' in player and player['cards']:
                        player_info['cards'] = player['cards']
                    
                    # Append processed player info to the list
                    processed_players.append(player_info)
                
                # Add processed players list to the team
                processed_lineups[team_name] = processed_players

            # Return processed lineup data
            return Response(processed_lineups)

        except Exception as e:
            logger.error(f"Error fetching lineups: {str(e)}")
            return self.handle_error(e, "Failed to fetch match lineups")

================
File: backend/backend/asgi.py
================
"""
ASGI config for backend project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')

application = get_asgi_application()

================
File: backend/backend/settings.py
================
"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'api'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware'
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
}

CORS_ORIGIN_ALLOW_ALL = True

================
File: backend/backend/urls.py
================
"""
URL configuration for backend project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('api.urls')),
]

================
File: backend/backend/wsgi.py
================
"""
WSGI config for backend project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')

application = get_wsgi_application()

================
File: backend/manage.py
================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

================
File: frontend/public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"
      crossorigin="anonymous"
    />
    <script src="https://cdn.jsdelivr.net/npm/react-bootstrap@2.10.5/dist/react-bootstrap.min.js"></script>
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: frontend/public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: frontend/public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: frontend/src/components/FootballPitch.css
================
.pitch-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 0;
}

.field {
  position: relative;
  width: 700px;
  height: 450px;
  background-color: #4caf50;
  border: 5px solid #fff;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
  margin: 20px auto;
}

.center-circle {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 100px;
  height: 100px;
  margin-top: -50px;
  margin-left: -50px;
  border: 2px solid #fff;
  border-radius: 50%;
}

.center-spot {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 6px;
  height: 6px;
  margin-top: -3px;
  margin-left: -3px;
  background-color: white;
  border-radius: 50%;
}

.half-line {
  position: absolute;
  top: 0;
  left: 50%;
  width: 2px;
  height: 100%;
  background-color: white;
}

.penalty-area {
  position: absolute;
  width: 120px;
  height: 250px;
  border: 2px solid #fff;
}

.penalty-area.left {
  left: 0;
  top: 50%;
  transform: translateY(-50%);
}

.penalty-area.right {
  right: 0;
  top: 50%;
  transform: translateY(-50%);
}

.goal-area {
  position: absolute;
  width: 60px;
  height: 140px;
  border: 2px solid #fff;
}

.goal-area.left {
  left: 0;
  top: 50%;
  transform: translateY(-50%);
}

.goal-area.right {
  right: 0;
  top: 50%;
  transform: translateY(-50%);
}

.penalty-spot {
  position: absolute;
  width: 6px;
  height: 6px;
  background-color: white;
  border-radius: 50%;
}

.penalty-spot.left {
  left: 80px;
  top: 50%;
  transform: translateY(-50%);
}

.penalty-spot.right {
  right: 80px;
  top: 50%;
  transform: translateY(-50%);
}

.goal {
  position: absolute;
  width: 16px;
  height: 80px;
  background-color: rgba(255, 255, 255, 0.8);
}

.goal.left {
  left: -16px;
  top: 50%;
  transform: translateY(-50%);
}

.goal.right {
  right: -16px;
  top: 50%;
  transform: translateY(-50%);
}

.corner-arc {
  position: absolute;
  width: 20px;
  height: 20px;
  border: 2px solid #fff;
  border-radius: 30%;
}

.corner-arc.top-left {
  top: -5px;
  left: -5px;
  border-top: none;
  border-left: none;
}

.corner-arc.top-right {
  top: -5px;
  right: -5px;
  border-top: none;
  border-right: none;
}

.corner-arc.bottom-left {
  bottom: -5px;
  left: -5px;
  border-bottom: none;
  border-left: none;
}

.corner-arc.bottom-right {
  bottom: -5px;
  right: -5px;
  border-bottom: none;
  border-right: none;
}

.marker {
  position: absolute;
  width: 8px;
  height: 8px;
  background-color: rgba(13, 110, 253, 0.8); /* Bootstrap primary color */
  border: 2px solid white;
  border-radius: 50%;
  cursor: pointer;
  transform: translate(-50%, -50%);
  transition: all 0.2s ease;
  outline: none;
}

.marker:hover,
.marker:focus {
  transform: translate(-50%, -50%) scale(1.5);
  background-color: rgba(13, 110, 253, 1);
}

.marker.selected {
  background-color: #dc3545; /* Bootstrap danger color */
  transform: translate(-50%, -50%) scale(1.5);
}

.info-box {
  width: 100%;
  background-color: #f8f9fa; /* Bootstrap light color */
}

/* Make the pitch container responsive */
@media (max-width: 768px) {
  .field {
    width: 100%;
    height: auto;
    aspect-ratio: 1.556; /* Maintains 700:450 ratio */
  }
}

================
File: frontend/src/components/Home.js
================
import React, { useState, useEffect } from "react";
import { Container, Row, Col, Card, Modal, Button } from "react-bootstrap";
import { useNavigate } from "react-router-dom";
import * as api from "../services/api";
import "./LeagueSelection.css";

const Home = () => {
  const [leagues, setLeagues] = useState([]);
  const [selectedLeague, setSelectedLeague] = useState(null);
  const [seasons, setSeasons] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchLeagues = async () => {
      try {
        const competitionsData = await api.getCompetitions();
        // Group competitions by unique competition_id and get latest season info
        const uniqueLeagues = Object.values(
          competitionsData.reduce((acc, comp) => {
            if (
              !acc[comp.competition_id] ||
              new Date(comp.season_name) >
                new Date(acc[comp.competition_id].season_name)
            ) {
              acc[comp.competition_id] = {
                id: comp.competition_id,
                name: comp.competition_name,
                country: comp.country_name,
                gender: comp.competition_gender,
                international: comp.competition_international,
                logoUrl: `/api/placeholder/100/100`,
              };
            }
            return acc;
          }, {})
        ).sort((a, b) => a.name.localeCompare(b.name));

        setLeagues(uniqueLeagues);
        setError(null);
      } catch (err) {
        setError("Failed to load leagues");
      } finally {
        setLoading(false);
      }
    };

    fetchLeagues();
  }, []);

  const handleLeagueClick = async (league) => {
    try {
      const seasonsData = await api.getSeasons(league.id);
      const sortedSeasons = seasonsData.sort(
        (a, b) => new Date(b.season_name) - new Date(a.season_name)
      );
      setSeasons(sortedSeasons);
      setSelectedLeague(league);
      setShowModal(true);
      setError(null);
    } catch (err) {
      setError("Failed to load seasons for this league");
    }
  };

  if (loading) {
    return (
      <Container className="d-flex justify-content-center align-items-center vh-100">
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </Container>
    );
  }

  return (
    <Container fluid className="py-5" style={{ backgroundColor: "#f8f9fa" }}>
      <h1 className="text-center mb-5">Select a League</h1>

      {error && (
        <div className="alert alert-danger text-center mb-4" role="alert">
          {error}
        </div>
      )}

      <Row className="g-4">
        {leagues.map((league) => (
          <Col key={league.id} xs={12} sm={6} md={4} lg={3}>
            <Card
              className="h-100 league-card"
              onClick={() => handleLeagueClick(league)}
              style={{
                cursor: "pointer",
                transition: "transform 0.2s",
                ":hover": { transform: "scale(1.03)" },
              }}
            >
              <div className="text-center pt-3">
                <img
                  src={league.logoUrl}
                  alt={`${league.name} logo`}
                  className="img-fluid"
                  style={{
                    width: "100px",
                    height: "100px",
                    objectFit: "contain",
                  }}
                />
              </div>
              <Card.Body className="text-center">
                <Card.Title>{league.name}</Card.Title>
                <Card.Text className="text-muted">
                  {league.country}
                  {league.international && " • International"}
                </Card.Text>
              </Card.Body>
            </Card>
          </Col>
        ))}
      </Row>

      <Modal
        show={showModal}
        onHide={() => setShowModal(false)}
        centered
        size="lg"
      >
        <Modal.Header closeButton>
          <Modal.Title>{selectedLeague?.name} - Select Season</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Row className="g-3">
            {seasons.map((season) => (
              <Col key={season.season_id} xs={12} sm={6}>
                <Card
                  className="season-card h-100"
                  onClick={() => {
                    navigate(
                      `/league/${selectedLeague.id}/${season.season_id}`
                    );
                  }}
                  style={{ cursor: "pointer" }}
                >
                  <Card.Body className="text-center">
                    <h5 className="mb-0">{season.season_name}</h5>
                  </Card.Body>
                </Card>
              </Col>
            ))}
          </Row>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowModal(false)}>
            Close
          </Button>
        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default Home;

================
File: frontend/src/components/LeagueOverview.js
================
import React, { useState, useEffect, useCallback } from "react";
import {
  Container,
  Row,
  Col,
  Card,
  Table,
  Badge,
  Spinner,
  Button,
  Pagination,
} from "react-bootstrap";
import { useParams, useNavigate } from "react-router-dom";
import { format } from "date-fns";
import * as api from "../services/api";

const LeagueOverview = () => {
  const { leagueId, seasonId } = useParams();
  const [allMatches, setAllMatches] = useState([]); // Store all matches
  const [displayedMatches, setDisplayedMatches] = useState([]); // Matches currently shown
  const [teams, setTeams] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [leagueInfo, setLeagueInfo] = useState(null);
  const navigate = useNavigate();

  // Pagination states
  const [showAllMatches, setShowAllMatches] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [matchesPerPage] = useState(10);

  const loadData = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const leagueData = await api.getCompetitionInfo(leagueId, seasonId);
      setLeagueInfo(leagueData);

      await new Promise((resolve) => setTimeout(resolve, 500));

      const matchesData = await api.getLeagueMatches(leagueId, seasonId);

      // Sort matches by date
      const sortedMatches = matchesData
        .filter((match) => match?.match_date)
        .sort((a, b) => new Date(b.match_date) - new Date(a.match_date));

      setAllMatches(sortedMatches);

      // Set initial displayed matches (last 5)
      setDisplayedMatches(sortedMatches.slice(0, 5));

      // Process teams
      const uniqueTeams = Array.from(
        new Set(
          matchesData
            .filter((match) => match?.home_team && match?.away_team)
            .flatMap((match) => [match.home_team, match.away_team])
        )
      ).sort();

      setTeams(uniqueTeams);
    } catch (err) {
      console.error("Error loading data:", err);
      setError("Failed to load data. Please try again.");
    } finally {
      setLoading(false);
    }
  }, [leagueId, seasonId]);

  useEffect(() => {
    if (leagueId && seasonId) {
      const timer = setTimeout(loadData, 100);
      return () => clearTimeout(timer);
    }
  }, [leagueId, seasonId, loadData]);

  // Calculate pagination
  const indexOfLastMatch = currentPage * matchesPerPage;
  const indexOfFirstMatch = indexOfLastMatch - matchesPerPage;
  const totalPages = Math.ceil(allMatches.length / matchesPerPage);

  // Update displayed matches when pagination or view mode changes
  useEffect(() => {
    if (showAllMatches) {
      setDisplayedMatches(
        allMatches.slice(indexOfFirstMatch, indexOfLastMatch)
      );
    } else {
      setDisplayedMatches(allMatches.slice(0, 5));
    }
  }, [
    showAllMatches,
    currentPage,
    allMatches,
    indexOfFirstMatch,
    indexOfLastMatch,
  ]);

  // Handle page change
  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  // Toggle between all matches and recent matches
  const toggleMatchesView = () => {
    setShowAllMatches(!showAllMatches);
    setCurrentPage(1); // Reset to first page when toggling
  };

  if (loading) {
    return (
      <Container className="d-flex justify-content-center align-items-center vh-100">
        <Spinner animation="border" variant="primary" />
      </Container>
    );
  }

  if (error) {
    return (
      <Container className="mt-4">
        <div className="alert alert-danger">
          <p>{error}</p>
          <Button variant="primary" onClick={loadData}>
            Try Again
          </Button>
        </div>
      </Container>
    );
  }

  return (
    <Container className="py-4">
      {/* League Header */}
      <Card className="mb-4 bg-primary text-white">
        <Card.Body>
          <Row className="align-items-center">
            <Col>
              <h2 className="mb-0">{leagueInfo?.competition || "League"}</h2>
              <p className="mb-0 opacity-75">
                {leagueInfo?.season || "Season"}
              </p>
            </Col>
          </Row>
        </Card.Body>
      </Card>

      {/* Matches Section */}
      <Row className="g-4">
        <Col xs={12}>
          <Card className="h-100">
            <Card.Header className="bg-light d-flex justify-content-between align-items-center">
              <h4 className="mb-0">
                {showAllMatches ? "All Matches" : "Recent Matches"}
              </h4>
              <Button
                variant="outline-primary"
                onClick={toggleMatchesView}
                className="float-end"
              >
                {showAllMatches ? "Show Recent Matches" : "View All Matches"}
              </Button>
            </Card.Header>
            <Card.Body className="p-0">
              <div className="table-responsive">
                <Table hover className="mb-0">
                  <thead>
                    <tr>
                      <th>Date</th>
                      <th>Home Team</th>
                      <th>Score</th>
                      <th>Away Team</th>
                      <th>Week</th>
                      <th>Status</th>
                    </tr>
                  </thead>
                  <tbody>
                    {displayedMatches.map((match) => (
                      <tr
                        key={match.match_id}
                        style={{ cursor: "pointer" }}
                        onClick={() => navigate(`/match/${match.match_id}`)}
                      >
                        <td>
                          {format(new Date(match.match_date), "MMM d, yyyy")}
                          <br />
                          <small className="text-muted">{match.kick_off}</small>
                        </td>
                        <td>{match.home_team}</td>
                        <td className="text-center">
                          <strong>
                            {match.home_score} - {match.away_score}
                          </strong>
                        </td>
                        <td>{match.away_team}</td>
                        <td>Week {match.match_week || "N/A"}</td>
                        <td>
                          <Badge
                            bg={
                              match.match_status === "available"
                                ? "success"
                                : "secondary"
                            }
                          >
                            {match.match_status}
                          </Badge>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </Table>
              </div>

              {/* Pagination */}
              {showAllMatches && totalPages > 1 && (
                <div className="d-flex justify-content-center p-3">
                  <Pagination>
                    <Pagination.First
                      onClick={() => handlePageChange(1)}
                      disabled={currentPage === 1}
                    />
                    <Pagination.Prev
                      onClick={() => handlePageChange(currentPage - 1)}
                      disabled={currentPage === 1}
                    />

                    {[...Array(totalPages)].map((_, index) => (
                      <Pagination.Item
                        key={index + 1}
                        active={currentPage === index + 1}
                        onClick={() => handlePageChange(index + 1)}
                      >
                        {index + 1}
                      </Pagination.Item>
                    ))}

                    <Pagination.Next
                      onClick={() => handlePageChange(currentPage + 1)}
                      disabled={currentPage === totalPages}
                    />
                    <Pagination.Last
                      onClick={() => handlePageChange(totalPages)}
                      disabled={currentPage === totalPages}
                    />
                  </Pagination>
                </div>
              )}
            </Card.Body>
          </Card>
        </Col>

        {/* Keep your existing Teams section */}
        {/* Teams */}
        <Col xs={12}>
          <Card className="h-100">
            <Card.Header className="bg-light">
              <h4 className="mb-0">Teams</h4>
            </Card.Header>
            <Card.Body>
              <Row className="g-3">
                {teams.map((team) => (
                  <Col key={team} xs={12} sm={6} md={4} lg={3}>
                    <Card
                      className="h-100 team-card"
                      style={{ cursor: "pointer" }}
                      onClick={() => console.log("Team clicked:", team)}
                    >
                      <Card.Body className="text-center">
                        <div className="mb-2">
                          <img
                            src={`/api/placeholder/50/50`}
                            alt={`${team} logo`}
                            className="team-logo"
                            style={{
                              width: "50px",
                              height: "50px",
                              objectFit: "contain",
                            }}
                          />
                        </div>
                        <h6 className="mb-0">{team}</h6>
                      </Card.Body>
                    </Card>
                  </Col>
                ))}
              </Row>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default LeagueOverview;

================
File: frontend/src/components/LeagueSelection.css
================
.league-card {
    border: 1px solid rgba(0,0,0,0.1);
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    transition: all 0.3s ease;
  }
  
  .league-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  }
  
  .season-card {
    border: 1px solid rgba(0,0,0,0.1);
    transition: all 0.2s ease;
  }
  
  .season-card:hover {
    background-color: #f8f9fa;
    border-color: #0d6efd;
  }
  
  /* Make the grid responsive for mobile */
  @media (max-width: 576px) {
    .container {
      padding: 1rem;
    }
    
    h1 {
      font-size: 1.75rem;
    }
  }

================
File: frontend/src/components/MatchDetails.js
================
import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";  // Import useNavigate
import { Container, Row, Col, Card, Table, Spinner } from "react-bootstrap";
import * as api from "../services/api";

const TeamLineup = ({ teamName, players, onPlayerClick }) => {
  const getPlayerPosition = (player) => {
    if (!player.positions || player.positions.length === 0) return "-";
    const position = player.positions[0];
    return position.position || "-";
  };

  const getPlayerStatus = (player) => {
    if (!player.positions || player.positions.length === 0) return "Unknown";
    const position = player.positions[0];
    if (position.start_reason === "Starting XI") {
      return "Starting XI";
    } else if (position.start_reason === "Substitution - On") {
      return "Substitute";
    }
    return position.start_reason || "Unknown";
  };

  return (
    <Card className="mb-4">
      <Card.Header>
        <h5 className="mb-0">{teamName}</h5>
      </Card.Header>
      <Card.Body className="p-0">
        <Table hover className="mb-0">
          <thead>
            <tr>
              <th>#</th>
              <th>Player</th>
              <th>Position</th>
              <th>Status</th>
            </tr>
          </thead>
          <tbody>
            {players.map((player) => (
              <tr key={player.player_id} onClick={() => onPlayerClick(player.player_name)}>
                <td>{player.jersey_number || "-"}</td>
                <td>{player.nickname || player.player_name}</td>
                <td>{getPlayerPosition(player)}</td>
                <td>
                  <span
                    className={
                      getPlayerStatus(player) === "Starting XI"
                        ? "text-success"
                        : "text-secondary"
                    }
                  >
                    {getPlayerStatus(player)}
                  </span>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </Card.Body>
    </Card>
  );
};

const MatchDetails = () => {
  const { matchId } = useParams();
  const navigate = useNavigate();  // Hook to navigate
  const [lineups, setLineups] = useState({ home: [], away: [] });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchLineups = async () => {
      try {
        setLoading(true);
        const lineupsData = await api.getMatchLineups(matchId);
        const teamNames = Object.keys(lineupsData);
        
        setLineups({
          home: lineupsData[teamNames[0]] || [],
          away: lineupsData[teamNames[1]] || [],
          homeTeam: teamNames[0],
          awayTeam: teamNames[1],
        });
        
        setError(null);
      } catch (err) {
        console.error("Error fetching lineups:", err);
        setError("Failed to load lineup data");
      } finally {
        setLoading(false);
      }
    };

    fetchLineups();
  }, [matchId]);

  const handlePlayerClick = (playerName) => {
    navigate(`/touches/${matchId}/${playerName}`);
  };

  if (loading) {
    return (
      <Container
        className="d-flex justify-content-center align-items-center"
        style={{ minHeight: "60vh" }}
      >
        <Spinner animation="border" variant="primary" />
      </Container>
    );
  }

  if (error) {
    return (
      <Container>
        <div className="alert alert-danger mt-4">{error}</div>
      </Container>
    );
  }

  return (
    <Container className="py-4">
      <Card className="mb-4">
        <Card.Header>
          <h4 className="mb-0">Match Details</h4>
        </Card.Header>
        <Card.Body>
          <Row>
            <Col md={4} className="text-center">
              <h5>{lineups.homeTeam}</h5>
            </Col>
            <Col md={4} className="text-center">
              <h5>vs</h5>
            </Col>
            <Col md={4} className="text-center">
              <h5>{lineups.awayTeam}</h5>
            </Col>
          </Row>
        </Card.Body>
      </Card>

      <Row>
        <Col md={6}>
          <TeamLineup teamName={lineups.homeTeam} players={lineups.home} onPlayerClick={handlePlayerClick} />
        </Col>
        <Col md={6}>
          <TeamLineup teamName={lineups.awayTeam} players={lineups.away} onPlayerClick={handlePlayerClick} />
        </Col>
      </Row>
    </Container>
  );
};

export default MatchDetails;

================
File: frontend/src/components/Navigation.js
================
import React from 'react';
import { Navbar, Container } from 'react-bootstrap';
import { Link } from 'react-router-dom';

const Navigation = () => {
  return (
    <Navbar bg="primary" variant="dark" expand="lg" className="mb-3">
      <Container>
        <Navbar.Brand as={Link} to="/">
          Statsball
        </Navbar.Brand>
      </Container>
    </Navbar>
  );
};

export default Navigation;

================
File: frontend/src/components/TouchesInMatch.js
================
import React, { useEffect, useState, useCallback } from "react";
import { Card, Container, Alert } from "react-bootstrap";
import { useParams } from "react-router-dom";
import * as api from "../services/api";
import "./FootballPitch.css";

const TouchesInMatch = () => {
  const { matchId, playerName } = useParams();
  const [touches, setTouches] = useState([]);
  const [selectedTouch, setSelectedTouch] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchTouchData = useCallback(async () => {
    if (!matchId || !playerName) {
      setError("Match ID or player name is missing");
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      setSelectedTouch(null); // Clear selected touch when fetching new data
      setTouches([]); // Clear existing touches

      const data = await api.getTouchData(matchId, playerName);
      setTouches(data);
      setError(null);
    } catch (error) {
      setError("Failed to load touch data. Please try again.");
      setTouches([]);
    } finally {
      setLoading(false);
    }
  }, [matchId, playerName]);

  useEffect(() => {
    fetchTouchData();

    // Cleanup function
    return () => {
      setTouches([]);
      setSelectedTouch(null);
    };
  }, [fetchTouchData]);

  const handleTouchClick = useCallback((touch) => {
    setSelectedTouch((prev) => (prev === touch ? null : touch));
  }, []);

  return (
    <Container className="mt-4">
      <Card className="shadow-sm">
        <Card.Header className="bg-primary text-white">
          <h4 className="mb-0">Player Touches - {playerName}</h4>
        </Card.Header>
        <Card.Body>
          {error && (
            <Alert variant="danger" className="mb-3">
              {error}
            </Alert>
          )}

          <div className="pitch-container">
            <div className="field">
              {/* Field markings */}
              <div className="center-circle" />
              <div className="center-spot" />
              <div className="half-line" />
              <div className="penalty-area left" />
              <div className="penalty-area right" />
              <div className="goal-area left" />
              <div className="goal-area right" />
              <div className="penalty-spot left" />
              <div className="penalty-spot right" />
              <div className="goal left" />
              <div className="goal right" />
              <div className="corner-arc top-left" />
              <div className="corner-arc top-right" />
              <div className="corner-arc bottom-left" />
              <div className="corner-arc bottom-right" />

              {/* Touch markers */}
              {!loading &&
                touches.map((touch, index) => {
                  const xPercent = (touch.location[0] / 120) * 100;
                  const yPercent = (touch.location[1] / 80) * 100;

                  return (
                    <div
                      key={`${index}-${touch.type}-${touch.location.join("-")}`}
                      className={`marker ${
                        selectedTouch === touch ? "selected" : ""
                      }`}
                      style={{
                        left: `${xPercent}%`,
                        top: `${yPercent}%`,
                      }}
                      onClick={() => handleTouchClick(touch)}
                      role="button"
                      tabIndex={0}
                      onKeyPress={(e) => {
                        if (e.key === "Enter" || e.key === " ") {
                          handleTouchClick(touch);
                        }
                      }}
                    />
                  );
                })}
            </div>

            {loading && (
              <div className="text-center my-4">
                <div className="spinner-border text-primary" role="status">
                  <span className="visually-hidden">Loading...</span>
                </div>
              </div>
            )}

            {selectedTouch && (
              <Card className="info-box mt-3">
                <Card.Body>
                  <h5 className="mb-3">Touch Information</h5>
                  <p className="mb-2">
                    <strong>Type:</strong> {selectedTouch.type}
                  </p>
                  <p className="mb-0">
                    <strong>Location:</strong>
                    {` X: ${selectedTouch.location[0].toFixed(
                      1
                    )}, Y: ${selectedTouch.location[1].toFixed(1)}`}
                  </p>
                </Card.Body>
              </Card>
            )}
          </div>
        </Card.Body>
      </Card>
    </Container>
  );
};

export default TouchesInMatch;

================
File: frontend/src/services/api.js
================
import axios from "axios";

const API_URL = "http://127.0.0.1:8000/api/";

// Configure axios instance
const apiClient = axios.create({
  baseURL: API_URL,
  timeout: 10000,
  headers: {
    "Content-Type": "application/json",
  },
});

// Add logging
apiClient.interceptors.request.use((request) => {
  console.log("Making request to:", request.url);
  return request;
});

apiClient.interceptors.response.use(
  (response) => response,
  (error) => {
    console.error("API Error:", error?.response?.data || error.message);
    throw error;
  }
);

// API functions
export const getLeagueMatches = async (leagueId, seasonId) => {
  try {
    const response = await apiClient.get(`matches/${leagueId}/${seasonId}/`);
    return response.data;
  } catch (error) {
    console.error(
      `Failed to fetch matches for league ${leagueId}, season ${seasonId}:`,
      error
    );
    throw new Error("Failed to load matches");
  }
};

export const getCompetitionInfo = async (leagueId, seasonId) => {
  try {
    const response = await apiClient.get(
      `competition-info/${leagueId}/${seasonId}/`
    );
    return response.data;
  } catch (error) {
    console.error(
      `Failed to fetch competition info for league ${leagueId}, season ${seasonId}:`,
      error
    );
    throw new Error("Failed to load competition information");
  }
};

export const getCompetitions = async () => {
  try {
    const response = await apiClient.get("competitions/");
    return response.data;
  } catch (error) {
    console.error("Failed to fetch competitions:", error);
    throw new Error("Failed to load competitions");
  }
};

export const getSeasons = async (competitionId) => {
  try {
    const response = await apiClient.get(`seasons/${competitionId}/`);
    return response.data;
  } catch (error) {
    console.error(
      `Failed to fetch seasons for competition ${competitionId}:`,
      error
    );
    throw new Error("Failed to load seasons");
  }
};

export const getTouchData = async (matchId, playerName) => {
  try {
    const response = await apiClient.get(
      `touches/${matchId}/${encodeURIComponent(playerName)}/`
    );
    return response.data;
  } catch (error) {
    console.error(
      `Failed to fetch touch data for match ${matchId}, player ${playerName}:`,
      error
    );
    throw new Error("Failed to load touch data");
  }
};

export const getMatchLineups = async (matchId) => {
  try {
    const response = await apiClient.get(`lineups/${matchId}/`);
    return response.data;
  } catch (error) {
    console.error(`Failed to fetch lineups for match ${matchId}:`, error);
    throw new Error("Failed to load match lineups");
  }
};

================
File: frontend/src/App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.navbar {
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.navbar-brand {
  font-weight: 600;
  letter-spacing: 0.5px;
}

.nav-link {
  font-weight: 500;
  transition: color 0.2s;
}

.nav-link:hover {
  color: rgba(255,255,255,0.9) !important;
}

================
File: frontend/src/App.js
================
import React from "react";
import { BrowserRouter as Router, Route, Routes } from "react-router-dom";
import TouchesInMatch from "./components/TouchesInMatch";
import Home from "./components/Home";
import LeagueOverview from "./components/LeagueOverview";
import MatchDetails from "./components/MatchDetails";
import Navigation from "./components/Navigation";
import ThemeProvider from "react-bootstrap/ThemeProvider";

function App() {
  return (
    <ThemeProvider>
      <Router>
        <Navigation />
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/league/:leagueId/:seasonId" element={<LeagueOverview />} />
          <Route path="/match/:matchId" element={<MatchDetails />} />
          <Route path="/touches/:matchId/:playerName" element={<TouchesInMatch />} />
        </Routes>
      </Router>
    </ThemeProvider>
  );
}

export default App;

================
File: frontend/src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: frontend/src/index.css
================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

================
File: frontend/src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: frontend/src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: frontend/src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: frontend/src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: frontend/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: frontend/package.json
================
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.7.7",
    "bootstrap": "^5.3.3",
    "date-fns": "^2.30.0",
    "react": "^18.3.1",
    "react-bootstrap": "^2.10.5",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.27.0",
    "react-scripts": "^3.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts --openssl-legacy-provider start",
    "build": "react-scripts --openssl-legacy-provider build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: frontend/README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: statsbombpy-master/.github/ISSUE_TEMPLATE/config.yml
================
blank_issues_enabled: true
contact_links:
  - name: SB support
    url: support@statsbomb.com

================
File: statsbombpy-master/.github/ISSUE_TEMPLATE/ISSUE-FORM.yml
================
name: Issue form
description: Report a bug or request support
title: "Issue report"
assignees:
  - scotty779
body:
  - type: markdown
    attributes:
      value: |
        Thanks for taking the time to fill out this form!
  - type: input
    id: contact
    attributes:
      label: Contact Details
      description: How can we get in touch with you if we need more info?
      placeholder: ex. email@example.com
    validations:
      required: false
  - type: dropdown
    id: version
    attributes:
      label: Version
      description: What version of our software are you running? (`from importlib.metadata import version; print(version('statsbombpy'))`)
      options:
        - 1.0.1
        - 1.0.0
    validations:
      required: true
  - type: dropdown
    id: os
    attributes:
      label: What platform are you seeing the problem on?
      multiple: true
      options:
        - Windows
        - Linux
        - Mac
    validations:
      required: true
  - type: textarea
    id: environment
    attributes:
      label: What Python version are you running, are you using a virtual environment? Give us as much info as you can.
      placeholder: e.g. Python 3.8, using `poetry` for dependency management
    validations:
      required: true
  - type: textarea
    id: what-happened
    attributes:
      label: What happened?
      description: Also tell us, what did you expect to happen?
      placeholder: Tell us what you see!
    validations:
      required: true
  - type: textarea
    id: logs
    attributes:
      label: Relevant log output
      description: Please copy and paste any relevant log output. This will be automatically formatted into code, so no need for backticks.
      render: shell
    validations:
      required: false
  - type: textarea
    id: code-to-reproduce
    attributes:
      label: Code to reproduce issue
      description: Please add any code required to reproduce the issue.
      render: shell
    validations:
      required: false
  - type: textarea
    id: attempted-solutions
    attributes:
      label: Attempted solutions
      description: What have you already tried?
    validations:
      required: false

================
File: statsbombpy-master/statsbombpy/api_client.py
================
import warnings
from tempfile import mkdtemp

import requests as req
from requests_cache import install_cache

import statsbombpy.entities as ents
from statsbombpy.config import CACHED_CALLS_SECS, HOSTNAME, VERSIONS

install_cache(mkdtemp(), backend="sqlite", expire_after=CACHED_CALLS_SECS)


class NoAuthWarning(UserWarning):
    """Warning raised when no user credentials are provided."""

    pass


def has_auth(creds):
    if creds.get("user") in [None, ""] or creds.get("passwd") in [None, ""]:
        warnings.warn(
            "credentials were not supplied. open data access only", NoAuthWarning
        )
        return False
    return True


def get_resource(url: str, creds: dict) -> list:
    auth = req.auth.HTTPBasicAuth(creds["user"], creds["passwd"])
    resp = req.get(url, auth=auth)
    if resp.status_code != 200:
        print(f"{url} -> {resp.status_code}")
        resp = []
    else:
        resp = resp.json()
    return resp


def competitions(creds: dict) -> dict:
    url = f"{HOSTNAME}/api/{VERSIONS['competitions']}/competitions"
    competitions = get_resource(url, creds)
    return ents.competitions(competitions)


def matches(competition_id: int, season_id: int, creds: dict) -> dict:
    url = f"{HOSTNAME}/api/{VERSIONS['matches']}/competitions/{competition_id}/seasons/{season_id}/matches"
    matches = get_resource(url, creds)
    return ents.matches(matches)


def lineups(match_id: int, creds: dict) -> dict:
    url = f"{HOSTNAME}/api/{VERSIONS['lineups']}/lineups/{match_id}"
    lineups = get_resource(url, creds)
    return ents.lineups(lineups)


def events(match_id: int, creds: dict) -> dict:
    url = f"{HOSTNAME}/api/{VERSIONS['events']}/events/{match_id}"
    events = get_resource(url, creds)
    return ents.events(events, match_id)


def frames(match_id: int, creds: dict) -> list:
    url = f"{HOSTNAME}/api/{VERSIONS['360-frames']}/360-frames/{match_id}"
    frames = get_resource(url, creds)
    return ents.frames(frames, match_id)


def player_match_stats(match_id: int, creds: dict) -> list:
    url = f"{HOSTNAME}/api/{VERSIONS['player-match-stats']}/matches/{match_id}/player-stats"
    return get_resource(url, creds)


def player_season_stats(competition_id: int, season_id: int, creds: dict) -> list:
    url = f"{HOSTNAME}/api/{VERSIONS['player-season-stats']}/competitions/{competition_id}/seasons/{season_id}/player-stats"
    return get_resource(url, creds)


def team_match_stats(match_id: int, creds: dict) -> list:
    url = f"{HOSTNAME}/api/{VERSIONS['team-match-stats']}/matches/{match_id}/team-stats"
    return get_resource(url, creds)


def team_season_stats(competition_id: int, season_id: int, creds: dict) -> list:
    url = f"{HOSTNAME}/api/{VERSIONS['team-season-stats']}/competitions/{competition_id}/seasons/{season_id}/team-stats"
    return get_resource(url, creds)

================
File: statsbombpy-master/statsbombpy/config.py
================
import multiprocessing
import os

CACHED_CALLS_SECS = 600

DEFAULT_CREDS = {
    "user": os.environ.get("SB_USERNAME"),
    "passwd": os.environ.get("SB_PASSWORD"),
}

HOSTNAME = "https://data.statsbombservices.com"

OPEN_DATA_PATHS = {
    "competitions": "https://raw.githubusercontent.com/statsbomb/open-data/master/data/competitions.json",
    "matches": "https://raw.githubusercontent.com/statsbomb/open-data/master/data/matches/{competition_id}/{season_id}.json",
    "lineups": "https://raw.githubusercontent.com/statsbomb/open-data/master/data/lineups/{match_id}.json",
    "events": "https://raw.githubusercontent.com/statsbomb/open-data/master/data/events/{match_id}.json",
    "frames": "https://raw.githubusercontent.com/statsbomb/open-data/master/data/three-sixty/{match_id}.json",
}

if "SB_CORES" in os.environ:
    MAX_CONCURRENCY = int(os.environ["SB_CORES"])
else:
    try:
        MAX_CONCURRENCY = max(multiprocessing.cpu_count() - 2, 4)
    except NotImplementedError:
        MAX_CONCURRENCY = 4

VERSIONS = {
    "competitions": "v4",
    "matches": "v6",
    "lineups": "v4",
    "events": "v8",
    "360-frames": "v2",
    "player-match-stats": "v4",
    "player-season-stats": "v4",
    "team-season-stats": "v2",
    "team-match-stats": "v1",
}

================
File: statsbombpy-master/statsbombpy/entities.py
================
def competitions(competitions: list) -> dict:
    competitions_ = {}
    for comp in competitions:
        competitions_[
            (
                comp["country_name"],
                comp["competition_name"],
                comp["season_name"],
                comp["competition_gender"],
            )
        ] = comp
    return competitions_


def matches(matches: list) -> dict:
    matches_ = {match["match_id"]: match for match in matches}
    return matches_


def lineups(lineups: list) -> dict:
    lineups_ = {lineup["team_id"]: lineup for lineup in lineups}
    return lineups_


def events(events: list, match_id: int) -> dict:
    events_ = {}
    for ev in events:
        ev["match_id"] = match_id
        events_[ev["id"]] = ev
    return events_


def frames(frames: list, match_id: int) -> list:
    for fr in frames:
        fr["match_id"] = match_id
    return frames

================
File: statsbombpy-master/statsbombpy/helpers.py
================
from collections import defaultdict

import pandas as pd

PLURALS = {
    "Starting XI": "starting_xis",
    "Half Start": "half_starts",
    "Camera On": "camera ons",
    "Camera off": "camera offs",
    "Pass": "passes",
    "Ball Receipt*": "ball_receipts",
    "Carry": "carrys",
    "Pressure": "pressures",
    "Foul Committed": "foul_committeds",
    "Foul Won": "foul_wons",
    "Duel": "duels",
    "Interception": "interceptions",
    "Block": "blocks",
    "Referee Ball-Drop": "referee_ball_drops",
    "Ball Recovery": "ball_recoverys",
    "Dispossessed": "dispossesseds",
    "Clearance": "clearances",
    "Dribble": "dribbles",
    "Miscontrol": "miscontrols",
    "Shot": "shots",
    "Goal Keeper": "goal_keepers",
    "Dribbled Past": "dribbled_pasts",
    "Injury Stoppage": "injury_stoppages",
    "Half End": "half_ends",
    "Substitution": "substitutions",
    "Shield": "shields",
    "Tactical Shift": "tactical_shifts",
    "Own Goal Against": "own_goal_againsts",
    "Own Goal For": "own_goal_fors",
    "Bad Behaviour": "bad_behaviours",
    "Player Off": "player_offs",
    "Player On": "player_ons",
    "50/50": "50/50s",
    "Error": "errors",
    "Offside": "offsides",
}


def flatten_event(event, flatten_attrs):
    if flatten_attrs:
        ev_type = event["type"]["name"].lower().replace(" ", "_").replace("*", "")
        ev_type = ev_type if event["type"]["name"] != "Goal Keeper" else "goalkeeper"
        if ev_type in event:
            for k, v in event[ev_type].items():
                event[f"{ev_type}_{k}"] = v
            del event[ev_type]

    for k, v in event.copy().items():
        if isinstance(v, dict) and "name" in v:
            event[k] = v["name"]
            if k in [
                "possession_team",
                "player",
                "team",
                "pass_recipient",
                "substitution_outcome",
                "substitution_replacement",
            ]:
                event[f"{k}_id"] = v["id"]
    return event


def filter_and_group_events(events, filters, fmt, flatten_attrs):
    events_ = defaultdict(list)
    for ev in events.values():
        ev_type = PLURALS[ev["type"]["name"]]
        if not is_relevant(ev, filters):
            continue
        if fmt == "dataframe":
            ev = flatten_event(ev, flatten_attrs)
        events_[ev_type].append(ev)
    return events_


def is_relevant(event, filters):
    return all(event.get("type", {}).get("name") == v for k, v in filters.items())


def reduce_events(all_events: dict, fmt: str) -> dict:
    reduced_events: dict = defaultdict(list)
    for events in all_events:
        for ev_type, evs in events.items():
            reduced_events[ev_type] = reduced_events.get(ev_type, []) + evs
    if fmt == "dataframe":
        for ev_type, evs in reduced_events.items():
            reduced_events[ev_type] = pd.DataFrame(evs)
    return reduced_events


def merge_events_and_frames(
    events: dict,
    frames: list,
    drop_keys=[
        "event_uuid",
        "visible_area",
        "freeze_frame",
        "visible_player_counts",
        "distances_from_edge_of_visible_area",
    ],
) -> dict:
    frames = {frame["event_uuid"]: frame for frame in frames}
    events = {k: {**v, **frames.get(k, {})} for k, v in events.items()}
    for _, event in events.items():
        for key in list(event):
            if key == "visible_player_counts":
                for team in event[key]:
                    if team["team_id"] == event["team"]["id"]:
                        event["visible_teammates"] = team["count"]
                    else:
                        event["visible_opponents"] = team["count"]
            if key in drop_keys:
                del event[key]
    return events

================
File: statsbombpy-master/statsbombpy/public.py
================
import requests as req

import statsbombpy.entities as ents
from statsbombpy.config import OPEN_DATA_PATHS


def get_response(path):
    response = req.get(path)
    response.raise_for_status()
    data = response.json()
    return data


def competitions():
    competitions = get_response(OPEN_DATA_PATHS["competitions"])
    competitions = ents.competitions(competitions)
    return competitions


def matches(competition_id: int, season_id: int) -> dict:
    path = OPEN_DATA_PATHS["matches"].format(
        competition_id=competition_id, season_id=season_id
    )
    matches = get_response(path)
    matches = ents.matches(matches)
    return matches


def lineups(match_id: int):
    path = OPEN_DATA_PATHS["lineups"].format(match_id=match_id)
    lineups = get_response(path)
    lineups = ents.lineups(lineups)
    return lineups


def events(match_id: int) -> dict:
    path = OPEN_DATA_PATHS["events"].format(match_id=match_id)
    events = get_response(path)
    events = ents.events(events, match_id)
    return events


def frames(match_id: int) -> dict:
    path = OPEN_DATA_PATHS["frames"].format(match_id=match_id)
    frames = get_response(path)
    frames = ents.frames(frames, match_id)
    return frames

================
File: statsbombpy-master/statsbombpy/sb.py
================
from functools import partial
from multiprocessing import Pool
from typing import Union

import pandas as pd

from statsbombpy import api_client, public
from statsbombpy.config import DEFAULT_CREDS, MAX_CONCURRENCY
from statsbombpy.helpers import (filter_and_group_events,
                                 merge_events_and_frames, reduce_events)


def competitions(fmt="dataframe", creds: dict = DEFAULT_CREDS):
    if api_client.has_auth(creds) is True:
        competitions = api_client.competitions(creds)
    else:
        competitions = public.competitions()
    if fmt == "dataframe":
        if isinstance(competitions, dict):
            competitions = competitions.values()
        competitions = pd.DataFrame(competitions)
    return competitions


def matches(
    competition_id: int, season_id: int, fmt="dataframe", creds: dict = DEFAULT_CREDS
):
    if api_client.has_auth(creds) is True:
        matches = api_client.matches(competition_id, season_id, creds=creds)
    else:
        matches = public.matches(competition_id, season_id)
    if fmt == "dataframe":
        home_managers = [
            (
                ", ".join(
                    [m["name"] for m in matches[match]["home_team"]["managers"]]
                    if "managers" in matches[match]["home_team"]
                    else ""
                )
            )
            for match in matches
        ]
        away_managers = [
            (
                ", ".join(
                    [m["name"] for m in matches[match]["away_team"]["managers"]]
                    if "managers" in matches[match]["away_team"]
                    else ""
                )
            )
            for match in matches
        ]
        matches = pd.DataFrame(matches.values())
        matches["competition"] = matches.competition.apply(
            lambda c: f"{c['country_name']} - {c['competition_name']}"
        )
        for col in ["season", "home_team", "away_team"]:
            matches[col] = matches[col].apply(lambda c: c[f"{col}_name"])
        for col in ["competition_stage", "stadium", "referee"]:
            if col in matches.columns:
                matches[col] = matches[col].apply(
                    lambda x: x["name"] if not pd.isna(x) else x
                )
        matches["home_managers"] = home_managers
        matches["away_managers"] = away_managers
        metadata = matches.pop("metadata")
        for k in ["data_version", "shot_fidelity_version", "xy_fidelity_version"]:
            matches[k] = metadata.apply(lambda x: x.get(k))
    return matches


def lineups(match_id, fmt="dataframe", creds: dict = DEFAULT_CREDS):
    if api_client.has_auth(creds) is True:
        lineups = api_client.lineups(match_id, creds=creds)
    else:
        lineups = public.lineups(match_id)
    if fmt == "dataframe":
        lineups_ = {}
        for lineup in lineups.values():
            lineup_ = pd.DataFrame(lineup["lineup"])
            lineup_["country"] = lineup_.country.apply(
                lambda c: c["name"] if isinstance(c, dict) else "Unknown"
            )
            lineups_[lineup["team_name"]] = lineup_
            lineups = lineups_
    return lineups


def events(
    match_id: int,
    split: bool = False,
    filters: dict = {},
    fmt: str = "dataframe",
    flatten_attrs: bool = True,
    creds: dict = DEFAULT_CREDS,
    include_360_metrics=False,
) -> Union[pd.DataFrame, dict]:

    if not api_client.has_auth(creds) and include_360_metrics:
        raise Exception("360 metrics not available in open data")
    if api_client.has_auth(creds) is True:
        events = api_client.events(match_id, creds=creds)
    else:
        events = public.events(match_id)

    if include_360_metrics:
        frames = _360_frames(match_id, creds=creds)
        events = merge_events_and_frames(events, frames)

    if fmt == "dataframe":
        events = filter_and_group_events(events, filters, fmt, flatten_attrs)
        for ev_type, evs in events.items():
            events[ev_type] = pd.DataFrame(evs)
        if split is False:
            events = pd.concat([*events.values()], axis=0, ignore_index=True, sort=True)
    return events


def competition_events(
    country: str,
    division: str,
    season: str,
    gender: str = "male",
    split: bool = False,
    filters: dict = {},
    fmt: str = "dataframe",
    creds: dict = DEFAULT_CREDS,
    include_360_metrics=False,
) -> Union[pd.DataFrame, dict]:

    c = competitions(creds=creds, fmt="dict")[country, division, season, gender]

    events_call = partial(
        events,
        fmt="json",
        creds=creds,
        include_360_metrics=include_360_metrics,
    )
    with Pool(MAX_CONCURRENCY) as p:
        matches_events = p.map(
            events_call,
            matches(c["competition_id"], c["season_id"], fmt="dict", creds=creds),
        )
        matches_events = map(
            lambda events: filter_and_group_events(
                events, filters, fmt, fmt == "dataframe"
            ),
            matches_events,
        )

    competition_events = reduce_events(matches_events, fmt)
    if fmt == "dataframe" and split is False:
        competition_events = pd.concat(
            [*competition_events.values()], axis=0, ignore_index=True, sort=True
        )
    return competition_events


def _360_frames(
    match_id: int,
    creds: dict = DEFAULT_CREDS,
) -> Union[pd.DataFrame, list, dict]:
    if api_client.has_auth(creds) is True:
        frames = api_client.frames(match_id, creds=creds)
    else:
        frames = public.frames(match_id)
    return frames


def frames(
    match_id: int,
    fmt: str = "dataframe",
    creds: dict = DEFAULT_CREDS,
) -> Union[pd.DataFrame, list, dict]:
    frames = _360_frames(match_id, creds)
    for frame in frames:
        if "distances_from_edge_of_visible_area" in frame:
            if frame["distances_from_edge_of_visible_area"] is not None:
                for ff, d_from_vis_area in zip(
                    frame["freeze_frame"], frame["distances_from_edge_of_visible_area"]
                ):
                    ff["distance_from_edge_of_visible_area"] = d_from_vis_area["distance"]
    keys = ["event_uuid", "visible_area", "match_id", "freeze_frame"]
    frames = [{key: frame[key] for key in keys} for frame in frames]
    if fmt == "dataframe":
        frames = pd.DataFrame(frames).explode("freeze_frame")
        frames = pd.concat(
            [
                frames.drop("freeze_frame", axis=1).reset_index(drop=True),
                pd.json_normalize(frames.freeze_frame),
            ],
            axis=1,
        )
        frames = frames.rename(columns={"event_uuid": "id"})
    return frames


def competition_frames(
    country: str,
    division: str,
    season: str,
    gender: str = "male",
    fmt: str = "dataframe",
    creds: dict = DEFAULT_CREDS,
) -> Union[pd.DataFrame, dict]:

    c = competitions(creds=creds, fmt="dict")[country, division, season, gender]

    frames_call = partial(
        frames,
        fmt="json",
        creds=creds,
    )
    with Pool(MAX_CONCURRENCY) as p:
        competition_frames = p.map(
            frames_call,
            matches(c["competition_id"], c["season_id"], fmt="dict", creds=creds),
        )

    if fmt == "dataframe":
        competition_frames = pd.concat(
            [
                pd.json_normalize(
                    frame,
                    "freeze_frame",
                    ["event_uuid", "match_id", "visible_area"],
                )
                for frame in competition_frames
            ],
            axis=0,
            ignore_index=True,
            sort=True,
        )
    return competition_frames


def player_match_stats(
    match_id: int,
    fmt: str = "dataframe",
    creds: dict = DEFAULT_CREDS,
) -> Union[pd.DataFrame, dict]:
    if api_client.has_auth(creds) is True:
        player_match_stats = api_client.player_match_stats(match_id, creds=creds)
    else:
        raise Exception(
            "There is currently no open data for aggregated stats, please provide credentials"
        )
    if fmt == "dataframe":
        player_match_stats = pd.json_normalize(player_match_stats)
    return player_match_stats


def player_season_stats(
    competition_id: int,
    season_id: int,
    fmt="dataframe",
    creds: dict = DEFAULT_CREDS,
) -> Union[pd.DataFrame, dict]:
    if api_client.has_auth(creds) is True:
        player_season_stats = api_client.player_season_stats(
            competition_id, season_id, creds=creds
        )
    else:
        raise Exception(
            "There is currently no open data for aggregated stats, please provide credentials"
        )
    if fmt == "dataframe":
        player_season_stats = pd.json_normalize(player_season_stats)
    return player_season_stats


def team_match_stats(
    match_id: int,
    fmt: str = "dataframe",
    creds: dict = DEFAULT_CREDS,
) -> Union[pd.DataFrame, dict]:
    if api_client.has_auth(creds) is True:
        team_match_stats = api_client.team_match_stats(match_id, creds=creds)
    else:
        raise Exception(
            "There is currently no open data for aggregated stats, please provide credentials"
        )
    if fmt == "dataframe":
        team_match_stats = pd.json_normalize(team_match_stats)
    return team_match_stats


def team_season_stats(
    competition_id: int,
    season_id: int,
    fmt="dataframe",
    creds: dict = DEFAULT_CREDS,
) -> Union[pd.DataFrame, dict]:
    if api_client.has_auth(creds) is True:
        team_season_stats = api_client.team_season_stats(
            competition_id, season_id, creds=creds
        )
    else:
        raise Exception(
            "There is currently no open data for aggregated stats, please provide credentials"
        )
    if fmt == "dataframe":
        team_season_stats = pd.json_normalize(team_season_stats)
    return team_season_stats

================
File: statsbombpy-master/tests/statsbombpy_test/test_sb.py
================
from unittest import TestCase, main

import pandas as pd
from requests.exceptions import HTTPError
from statsbombpy import sb


class TestBaseGetters(TestCase):
    def test_competitions(self):
        competitions = sb.competitions()
        self.assertIsInstance(competitions, pd.DataFrame)

        competitions = sb.competitions(fmt="json")
        self.assertIsInstance(competitions, dict)

        competitions = sb.competitions(creds={})
        self.assertIsInstance(competitions, pd.DataFrame)

    def test_matches(self):
        matches = sb.matches(competition_id=43, season_id=3)
        self.assertIsInstance(matches, pd.DataFrame)

        matches = sb.matches(competition_id=43, season_id=3, fmt="json")
        self.assertIsInstance(matches, dict)

        matches = sb.matches(competition_id=43, season_id=3, creds={})
        self.assertIsInstance(matches, pd.DataFrame)

        matches = sb.matches(competition_id=2, season_id=44)
        self.assertIsInstance(matches, pd.DataFrame)

        matches = sb.matches(competition_id=2, season_id=44, fmt="json")
        self.assertIsInstance(matches, dict)

        matches = sb.matches(competition_id=2, season_id=44, creds={})
        self.assertIsInstance(matches, pd.DataFrame)

        matches = sb.matches(competition_id=11, season_id=1)
        self.assertEqual(
            matches.query("match_id == 9695")["away_managers"].iloc[0],
            "Ernesto Valverde Tejedor",
        )

        with self.assertRaises(HTTPError) as cm:
            matches = sb.matches(competition_id=1, season_id=1, creds={})
        self.assertEqual(cm.exception.response.status_code, 404)

    def test_lineups(self):
        lineups = sb.lineups(match_id=7562)
        self.assertIsInstance(lineups, dict)
        self.assertIsInstance([*lineups.values()][0], pd.DataFrame)

        lineups = sb.lineups(match_id=7562, fmt="json")
        self.assertIsInstance(lineups, dict)

        lineups = sb.lineups(match_id=7562, creds={})
        self.assertIsInstance(lineups, dict)

        lineups = sb.lineups(match_id=301244)
        self.assertEqual(
            lineups["Stoke City"]["country"].iloc[0],
            "England",
        )

        with self.assertRaises(HTTPError) as cm:
            lineups = sb.lineups(match_id=1, creds={})
        self.assertEqual(cm.exception.response.status_code, 404)


class TestEventGetters(TestCase):
    def test_events(self):
        events = sb.events(match_id=7562)
        self.assertIsInstance(events, pd.DataFrame)

        events = sb.events(match_id=7562, split=True)
        self.assertIsInstance(events, dict)
        self.assertIsInstance(events["shots"], pd.DataFrame)

        events = sb.events(match_id=7562, fmt="json")
        self.assertIsInstance(events, dict)

        events = sb.events(match_id=7562, creds={})
        self.assertIsInstance(events, pd.DataFrame)
        self.assertTrue("shot_statsbomb_xg" in events.columns)

        events = sb.events(match_id=7562, creds={}, flatten_attrs=False)
        self.assertIsInstance(events, pd.DataFrame)
        self.assertFalse("shot_statsbomb_xg" in events.columns)
        self.assertTrue("shot" in events.columns)

        events = sb.events(match_id=3837323, fmt="json", include_360_metrics=True)
        self.assertIsInstance(events, dict)

        events = sb.events(match_id=3837323, include_360_metrics=True)
        self.assertIsInstance(events, pd.DataFrame)
        self.assertTrue("visible_teammates" in events.columns)

        with self.assertRaises(HTTPError) as cm:
            events = sb.events(match_id=1, creds={})
        self.assertEqual(cm.exception.response.status_code, 404)

    def test_competition_events(self):
        events = sb.competition_events(
            country="Europe",
            division="Champions League",
            season="2018/2019",
            gender="male",
        )
        self.assertIsInstance(events, pd.DataFrame)

        events = sb.competition_events(
            country="Europe",
            division="Champions League",
            season="2018/2019",
            split=True,
        )
        self.assertIsInstance(events["shots"], pd.DataFrame)

        events = sb.competition_events(
            country="Europe",
            division="Champions League",
            season="2022/2023",
            fmt="json",
        )
        self.assertIsInstance(events, dict)

        events = sb.competition_events(
            country="Europe",
            division="Champions League",
            season="2022/2023",
            include_360_metrics=True,
        )
        self.assertIsInstance(events, pd.DataFrame)
        self.assertTrue("visible_teammates" in events.columns)


class TestFrameGetters(TestCase):
    def test_frames(self):
        frames = sb.frames(match_id=3764302)
        self.assertIsInstance(frames, pd.DataFrame)

        frames = sb.frames(match_id=3764302, fmt="json")
        self.assertIsInstance(frames, list)

        frames = sb.frames(match_id=3788741, creds={})
        self.assertIsInstance(frames, pd.DataFrame)

        frames = sb.frames(match_id=3847567, creds={})
        self.assertIsInstance(frames, pd.DataFrame)

        with self.assertRaises(HTTPError) as cm:
            frames = sb.frames(match_id=1, creds={})
        self.assertEqual(cm.exception.response.status_code, 404)

    def test_competition_frames(self):
        frames = sb.competition_frames(
            country="Europe",
            division="Champions League",
            season="2022/2023",
            gender="male",
        )
        self.assertIsInstance(frames, pd.DataFrame)
        self.assertIsInstance(frames.distance_from_edge_of_visible_area[0], float)

        frames = sb.competition_frames(
            country="Europe",
            division="Champions League",
            season="2022/2023",
            gender="male",
            fmt="json",
        )
        self.assertIsInstance(frames, list)


class TestAggregatedStatsGetters(TestCase):
    def test_player_match_stats(self):
        player_match_stats = sb.player_match_stats(match_id=7562)
        self.assertIsInstance(player_match_stats, pd.DataFrame)

        player_match_stats = sb.player_match_stats(match_id=7562, fmt="json")
        self.assertIsInstance(player_match_stats, list)

        with self.assertRaises(Exception):
            sb.player_match_stats(match_id=7562, creds={})

    def test_player_season_stats(self):
        player_season_stats = sb.player_season_stats(competition_id=43, season_id=3)
        self.assertIsInstance(player_season_stats, pd.DataFrame)

        player_season_stats = sb.player_season_stats(
            competition_id=43, season_id=3, fmt="json"
        )
        self.assertIsInstance(player_season_stats, list)

        with self.assertRaises(Exception):
            sb.player_season_stats(competition_id=43, season_id=3, creds={})

        player_season_stats = sb.player_season_stats(competition_id=2, season_id=44)
        self.assertIsInstance(player_season_stats, pd.DataFrame)

        player_season_stats = sb.player_season_stats(
            competition_id=2, season_id=44, fmt="json"
        )
        self.assertIsInstance(player_season_stats, list)

        with self.assertRaises(Exception):
            sb.player_season_stats(competition_id=2, season_id=44, creds={})

    def test_team_match_stats(self):
        team_match_stats = sb.team_match_stats(match_id=3764302)
        self.assertIsInstance(team_match_stats, pd.DataFrame)

        team_match_stats = sb.team_match_stats(match_id=3764302, fmt="json")
        self.assertIsInstance(team_match_stats, list)

        with self.assertRaises(Exception):
            sb.team_match_stats(match_id=7562, creds={})


    def test_team_season_stats(self):
        team_season_stats = sb.team_season_stats(competition_id=43, season_id=3)
        self.assertIsInstance(team_season_stats, pd.DataFrame)

        team_season_stats = sb.team_season_stats(
            competition_id=43, season_id=3, fmt="json"
        )
        self.assertIsInstance(team_season_stats, list)

        with self.assertRaises(Exception):
            sb.team_season_stats(competition_id=43, season_id=3, creds={})

        team_season_stats = sb.team_season_stats(competition_id=2, season_id=44)
        self.assertIsInstance(team_season_stats, pd.DataFrame)

        team_season_stats = sb.team_season_stats(
            competition_id=2, season_id=44, fmt="json"
        )
        self.assertIsInstance(team_season_stats, list)

        with self.assertRaises(Exception):
            sb.team_season_stats(competition_id=2, season_id=44, creds={})


if __name__ == "__main__":
    main()

================
File: statsbombpy-master/.gitignore
================
__pycache__/
build/
dist/
*.egg-info/

================
File: statsbombpy-master/README.md
================
# statsbombpy <picture><source media="(prefers-color-scheme: dark)" srcset="https://github.com/statsbomb/logos/blob/main/StatsBombPython_Lock_Light.svg"><source media="(prefers-color-scheme: light)" srcset="https://github.com/statsbomb/logos/blob/main/StatsBombPython_Lock.svg"><img alt="StatsBombPython_Lock" src="https://github.com/statsbomb/logos/blob/main/StatsBombPython_Lock.svg" align="right" height="40"></picture>

[![PyPI version](https://badge.fury.io/py/statsbombpy.svg?)](https://badge.fury.io/py/statsbombpy)

Brought to you by StatsBomb, this repository is a Python package that allows users to easily stream StatsBomb data into Python using your log in credentials for the API or free data from our GitHub page. **API access is for paying customers only**

**Support: support@statsbomb.com**


## Installation Instructions

`pip install statsbombpy`


## Running the tests

`nose2 -v --pretty-assert`


## Configuration

### Authentication

#### Environment Variables
Authentication can be done by setting environment variables named `SB_USERNAME` and `SB_PASSWORD` to your login credentials.

#### Manual Calls
Alternatively, if you don't want to use environment variables, all functions accept an argument `creds` to pass your login credentials in the format `{"user": "", "passwd": ""}`

### Concurrency
You can specify how many of your computer's cores to use when running the `sb.competition_events()` and `sb.competition_frames()` functions by setting the environment variable `SB_CORES` to the number you want to use. Allowing statsbombpy to use more cores will speed up those functions.

If you don't have an environment variable set we will try to detect the number of cores in your system and use 2 less than that number. If we cannot detect the number of cores we set the number to 4.

## Open Data
StatsBomb's open data can be accessed without the need of authentication.

StatsBomb are committed to sharing new data and research publicly to enhance understanding of the game of Football. We want to actively encourage new research and analysis at all levels. Therefore we have made certain leagues of StatsBomb Data freely available for public use for research projects and genuine interest in football analytics.

StatsBomb are hoping that by making data freely available, we will extend the wider football analytics community and attract new talent to the industry. We would like to collect some basic personal information about users of our data. By [giving us your email address](https://statsbomb.com/resource-centre/), it means we will let you know when we make more data, tutorials and research available. We will store the information in accordance with our Privacy Policy and the GDPR.

#### Terms & Conditions
Whilst we are keen to share data and facilitate research, we also urge you to be responsible with the data. Please register your details on https://www.statsbomb.com/resource-centre and read our [User Agreement](doc/LICENSE.pdf) carefully.
By using this repository, you are agreeing to the user agreement. If you publish, share or distribute any research, analysis or insights based on this data, please state the data source as StatsBomb and use our logo.


## Usage

```
from statsbombpy import sb
```


### Competitions

```
sb.competitions()
```
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>competition_id</th>
      <th>season_id</th>
      <th>country_name</th>
      <th>competition_name</th>
      <th>competition_gender</th>
      <th>season_name</th>
      <th>match_updated</th>
      <th>match_available</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>9</td>
      <td>42</td>
      <td>Germany</td>
      <td>1. Bundesliga</td>
      <td>male</td>
      <td>2019/2020</td>
      <td>2019-12-29T07:47:45.981</td>
      <td>2019-12-29T07:47:45.981</td>
    </tr>
    <tr>
      <th>1</th>
      <td>9</td>
      <td>4</td>
      <td>Germany</td>
      <td>1. Bundesliga</td>
      <td>male</td>
      <td>2018/2019</td>
      <td>2019-12-16T23:09:16.168756</td>
      <td>2019-12-16T23:09:16.168756</td>
    </tr>
    <tr>
      <th>2</th>
      <td>9</td>
      <td>1</td>
      <td>Germany</td>
      <td>1. Bundesliga</td>
      <td>male</td>
      <td>2017/2018</td>
      <td>2019-12-16T23:09:16.168756</td>
      <td>2019-12-16T23:09:16.168756</td>
    </tr>
    <tr>
      <th>3</th>
      <td>78</td>
      <td>42</td>
      <td>Croatia</td>
      <td>1. HNL</td>
      <td>male</td>
      <td>2019/2020</td>
      <td>2020-01-02T10:35:49.065</td>
      <td>2020-01-02T10:35:49.065</td>
    </tr>
    <tr>
      <th>4</th>
      <td>10</td>
      <td>42</td>
      <td>Germany</td>
      <td>2. Bundesliga</td>
      <td>male</td>
      <td>2019/2020</td>
      <td>2019-12-27T00:36:37.498</td>
      <td>2019-12-27T00:36:37.498</td>
    </tr>
  </tbody>
</table>


### Matches

```
sb.matches(competition_id=9, season_id=42)
```
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>match_id</th>
      <th>match_date</th>
      <th>kick_off</th>
      <th>competition</th>
      <th>season</th>
      <th>home_team</th>
      <th>away_team</th>
      <th>home_score</th>
      <th>away_score</th>
      <th>match_status</th>
      <th>last_updated</th>
      <th>match_week</th>
      <th>competition_stage</th>
      <th>stadium</th>
      <th>referee</th>
      <th>home_managers</th>
      <th>away_managers</th>
      <th>data_version</th>
      <th>shot_fidelity_version</th>
      <th>xy_fidelity_version</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>303299</td>
      <td>2019-12-15</td>
      <td>18:00:00.000</td>
      <td>Germany - 1. Bundesliga</td>
      <td>2019/2020</td>
      <td>Schalke 04</td>
      <td>Eintracht Frankfurt</td>
      <td>1</td>
      <td>0</td>
      <td>available</td>
      <td>2019-12-17T09:50:17.558</td>
      <td>15</td>
      <td>Regular Season</td>
      <td>VELTINS-Arena</td>
      <td>F. Zwayer</td>
      <td>David Wagner</td>
      <td>Adi Hütter</td>
      <td>1.1.0</td>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>1</th>
      <td>303223</td>
      <td>2019-09-01</td>
      <td>18:00:00.000</td>
      <td>Germany - 1. Bundesliga</td>
      <td>2019/2020</td>
      <td>Eintracht Frankfurt</td>
      <td>Fortuna Düsseldorf</td>
      <td>2</td>
      <td>1</td>
      <td>available</td>
      <td>2019-12-16T23:09:16.168756</td>
      <td>3</td>
      <td>Regular Season</td>
      <td>Commerzbank-Arena</td>
      <td>F. Willenborg</td>
      <td>Adi Hütter</td>
      <td>Friedhelm Funkel</td>      
      <td>1.1.0</td>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>2</th>
      <td>303083</td>
      <td>2019-12-15</td>
      <td>15:30:00.000</td>
      <td>Germany - 1. Bundesliga</td>
      <td>2019/2020</td>
      <td>Wolfsburg</td>
      <td>Borussia Mönchengladbach</td>
      <td>2</td>
      <td>1</td>
      <td>available</td>
      <td>2019-12-17T15:52:17.843</td>
      <td>15</td>
      <td>Regular Season</td>
      <td>VOLKSWAGEN ARENA</td>
      <td>F. Brych</td>
      <td>Oliver Glasner</td>
      <td>Marco Rose</td>      
      <td>1.1.0</td>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>303266</td>
      <td>2019-12-14</td>
      <td>15:30:00.000</td>
      <td>Germany - 1. Bundesliga</td>
      <td>2019/2020</td>
      <td>Hertha Berlin</td>
      <td>Freiburg</td>
      <td>1</td>
      <td>0</td>
      <td>available</td>
      <td>2019-12-17T17:43:18.285</td>
      <td>15</td>
      <td>Regular Season</td>
      <td>Olympiastadion Berlin</td>
      <td>F. Willenborg</td>
      <td>Jürgen Klinsmann</td>
      <td>Christian Streich</td>      
      <td>1.1.0</td>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>4</th>
      <td>303073</td>
      <td>2019-12-21</td>
      <td>15:30:00.000</td>
      <td>Germany - 1. Bundesliga</td>
      <td>2019/2020</td>
      <td>Bayern Munich</td>
      <td>Wolfsburg</td>
      <td>2</td>
      <td>0</td>
      <td>available</td>
      <td>2019-12-23T18:02:36.454</td>
      <td>17</td>
      <td>Regular Season</td>
      <td>Allianz Arena</td>
      <td>C. Dingert</td>
      <td>Hans-Dieter Flick</td>
      <td>Oliver Glasner </td>      
      <td>1.1.0</td>
      <td>2</td>
      <td>2</td>
    </tr>
  </tbody>
</table>


### Lineups

```
sb.lineups(match_id=303299)["Eintracht Frankfurt"]
```
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>player_id</th>
      <th>player_name</th>
      <th>player_nickname</th>
      <th>birth_date</th>
      <th>player_gender</th>
      <th>player_height</th>
      <th>player_weight</th>
      <th>jersey_number</th>
      <th>country</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>3204</td>
      <td>Almamy Touré</td>
      <td>None</td>
      <td>1996-04-28</td>
      <td>male</td>
      <td>182.0</td>
      <td>72.0</td>
      <td>18</td>
      <td>Mali</td>
    </tr>
    <tr>
      <th>1</th>
      <td>5591</td>
      <td>Filip Kostić</td>
      <td>None</td>
      <td>1992-11-01</td>
      <td>male</td>
      <td>184.0</td>
      <td>82.0</td>
      <td>10</td>
      <td>Serbia</td>
    </tr>
    <tr>
      <th>2</th>
      <td>7713</td>
      <td>Obite Evan N"Dicka</td>
      <td>Evan N'Dicka</td>
      <td>1999-08-20</td>
      <td>male</td>
      <td>190.0</td>
      <td>NaN</td>
      <td>2</td>
      <td>France</td>
    </tr>
    <tr>
      <th>3</th>
      <td>8307</td>
      <td>Martin Hinteregger</td>
      <td>None</td>
      <td>1992-09-07</td>
      <td>male</td>
      <td>184.0</td>
      <td>83.0</td>
      <td>13</td>
      <td>Austria</td>
    </tr>
    <tr>
      <th>4</th>
      <td>8669</td>
      <td>Mijat Gaćinović</td>
      <td>None</td>
      <td>1995-02-08</td>
      <td>male</td>
      <td>175.0</td>
      <td>66.0</td>
      <td>11</td>
      <td>Serbia</td>
    </tr>
  </tbody>
</table>


### Events
The default settings for querying events return a single dataframe with all event types and event attributes.

```
events = sb.events(match_id=303299)
```

<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>ball_receipt_outcome</th>
      <th>ball_recovery_offensive</th>
      <th>ball_recovery_recovery_failure</th>
      <th>block_deflection</th>
      <th>carry_end_location</th>
      <th>clearance_aerial_won</th>
      <th>clearance_body_part</th>
      <th>clearance_head</th>
      <th>clearance_left_foot</th>
      <th>clearance_right_foot</th>
      <th>counterpress</th>
      <th>dribble_no_touch</th>
      <th>dribble_outcome</th>
      <th>dribble_overrun</th>
      <th>duel_outcome</th>
      <th>duel_type</th>
      <th>duration</th>
      <th>foul_committed_advantage</th>
      <th>foul_committed_card</th>
      <th>foul_won_advantage</th>
      <th>foul_won_defensive</th>
      <th>goalkeeper_body_part</th>
      <th>goalkeeper_end_location</th>
      <th>goalkeeper_outcome</th>
      <th>goalkeeper_position</th>
      <th>goalkeeper_technique</th>
      <th>goalkeeper_type</th>
      <th>id</th>
      <th>index</th>
      <th>injury_stoppage_in_chain</th>
      <th>interception_outcome</th>
      <th>location</th>
      <th>match_id</th>
      <th>minute</th>
      <th>off_camera</th>
      <th>out</th>
      <th>pass_aerial_won</th>
      <th>pass_angle</th>
      <th>pass_assisted_shot_id</th>
      <th>pass_body_part</th>
      <th>pass_cross</th>
      <th>pass_cut_back</th>
      <th>pass_deflected</th>
      <th>pass_end_location</th>
      <th>pass_goal_assist</th>
      <th>pass_height</th>
      <th>pass_length</th>
      <th>pass_outcome</th>
      <th>pass_outswinging</th>
      <th>pass_recipient</th>
      <th>pass_shot_assist</th>
      <th>pass_straight</th>
      <th>pass_switch</th>
      <th>pass_technique</th>
      <th>pass_through_ball</th>
      <th>pass_type</th>
      <th>pass_xclaim</th>
      <th>period</th>
      <th>play_pattern</th>
      <th>player</th>
      <th>position</th>
      <th>possession</th>
      <th>possession_team</th>
      <th>related_events</th>
      <th>second</th>
      <th>shot_aerial_won</th>
      <th>shot_body_part</th>
      <th>shot_end_location</th>
      <th>shot_first_time</th>
      <th>shot_freeze_frame</th>
      <th>shot_key_pass_id</th>
      <th>shot_one_on_one</th>
      <th>shot_outcome</th>
      <th>shot_statsbomb_xg</th>
      <th>shot_statsbomb_xg2</th>
      <th>shot_technique</th>
      <th>shot_type</th>
      <th>substitution_outcome</th>
      <th>substitution_replacement</th>
      <th>team</th>
      <th>timestamp</th>
      <th>type</th>
      <th>under_pressure</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>500</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>3.498736</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>84828c06-41b5-44eb-aa92-1710bdb818ac</td>
      <td>1838</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>[50.1, 16.6]</td>
      <td>303299</td>
      <td>47</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>2.720095</td>
      <td>NaN</td>
      <td>Left Foot</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>[13.3, 33.1]</td>
      <td>NaN</td>
      <td>Ground Pass</td>
      <td>40.329765</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Frederik Rønnow</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>2</td>
      <td>Regular Play</td>
      <td>Obite Evan N"Dicka</td>
      <td>Left Center Back</td>
      <td>103</td>
      <td>Eintracht Frankfurt</td>
      <td>[ae3094e3-faa3-4608-8284-d9b8cca77711, c1202f1c-0831-4e88-83b2-597f56f0c858]</td>
      <td>52</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Eintracht Frankfurt</td>
      <td>00:02:52.438</td>
      <td>Pass</td>
      <td>True</td>
    </tr>
    <tr>
      <th>501</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>3.604236</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>9061cd20-513b-499f-b925-f1de5f241281</td>
      <td>1840</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>[13.3, 33.1]</td>
      <td>303299</td>
      <td>47</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>-0.153945</td>
      <td>NaN</td>
      <td>Right Foot</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>[77.1, 23.2]</td>
      <td>NaN</td>
      <td>High Pass</td>
      <td>64.563540</td>
      <td>Incomplete</td>
      <td>NaN</td>
      <td>Mijat Gaćinović</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>2</td>
      <td>Regular Play</td>
      <td>Frederik Rønnow</td>
      <td>Goalkeeper</td>
      <td>103</td>
      <td>Eintracht Frankfurt</td>
      <td>[8e6495a7-782a-4f1a-845f-3ec50d761a1e, ff758a12-1ba6-4dd4-8b2c-7d39aa7aed97]</td>
      <td>55</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Eintracht Frankfurt</td>
      <td>00:02:55.937</td>
      <td>Pass</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>502</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>2.101999</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>8e6495a7-782a-4f1a-845f-3ec50d761a1e</td>
      <td>1842</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>[43.0, 56.9]</td>
      <td>303299</td>
      <td>47</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>-0.703110</td>
      <td>NaN</td>
      <td>Head</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>[64.0, 39.1]</td>
      <td>NaN</td>
      <td>High Pass</td>
      <td>27.528894</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Amine Harit</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Recovery</td>
      <td>NaN</td>
      <td>2</td>
      <td>Regular Play</td>
      <td>Ozan Muhammed Kabak</td>
      <td>Right Center Back</td>
      <td>104</td>
      <td>Schalke 04</td>
      <td>[9061cd20-513b-499f-b925-f1de5f241281, be6dfe7d-7596-4cc2-8cd9-8c17d064317e]</td>
      <td>59</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Schalke 04</td>
      <td>00:02:59.541</td>
      <td>Pass</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>503</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1.187459</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>86431bc7-210a-4868-8e18-26ff38becefc</td>
      <td>1854</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>[65.9, 12.6]</td>
      <td>303299</td>
      <td>48</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>-0.730239</td>
      <td>NaN</td>
      <td>Right Foot</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>[74.5, 4.9]</td>
      <td>NaN</td>
      <td>Ground Pass</td>
      <td>11.543396</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Amine Harit</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>2</td>
      <td>Regular Play</td>
      <td>Suat Serdar</td>
      <td>Left Defensive Midfield</td>
      <td>104</td>
      <td>Schalke 04</td>
      <td>[761b4e65-8f64-464c-8153-6a98465208ba]</td>
      <td>7</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Schalke 04</td>
      <td>00:03:07.689</td>
      <td>Pass</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>504</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.766628</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>6e58c713-622c-4246-8243-e4162e487a1c</td>
      <td>1858</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>[79.1, 10.5]</td>
      <td>303299</td>
      <td>48</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1.254940</td>
      <td>NaN</td>
      <td>Right Foot</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>[84.1, 25.8]</td>
      <td>NaN</td>
      <td>Ground Pass</td>
      <td>16.096273</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Rabbi Matondo</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>2</td>
      <td>Regular Play</td>
      <td>Amine Harit</td>
      <td>Center Attacking Midfield</td>
      <td>104</td>
      <td>Schalke 04</td>
      <td>[b1960a76-d3ae-4ef3-a2cd-47eca8c25e0a, dd1575c0-a408-4177-944d-7e86d2f79181]</td>
      <td>11</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Schalke 04</td>
      <td>00:03:11.719</td>
      <td>Pass</td>
      <td>True</td>
    </tr>
  </tbody>
</table>




It's also possible to get distinct dataframes for each event type and/or to have distinct event attributes on their own columns
```
sb.events(match_id=303299, split=True, flatten_attrs=False)["dribbles"]
```
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>index</th>
      <th>period</th>
      <th>timestamp</th>
      <th>minute</th>
      <th>second</th>
      <th>type</th>
      <th>possession</th>
      <th>possession_team</th>
      <th>play_pattern</th>
      <th>team</th>
      <th>player</th>
      <th>position</th>
      <th>location</th>
      <th>duration</th>
      <th>under_pressure</th>
      <th>related_events</th>
      <th>dribble</th>
      <th>match_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>b190c01f-ad24-468c-8241-f955b91d996c</td>
      <td>131</td>
      <td>1</td>
      <td>00:02:08.032</td>
      <td>2</td>
      <td>8</td>
      <td>Dribble</td>
      <td>4</td>
      <td>Schalke 04</td>
      <td>Regular Play</td>
      <td>Schalke 04</td>
      <td>Daniel Caligiuri</td>
      <td>Right Wing</td>
      <td>[110.2, 62.9]</td>
      <td>0.000000</td>
      <td>True</td>
      <td>[60f822df-5747-4787-b0f9-45bf5217eb8a]</td>
      <td>{'outcome': {'id': 8, 'name': 'Complete'}}</td>
      <td>303299</td>
    </tr>
    <tr>
      <th>1</th>
      <td>4d773c92-f89f-491e-b3e0-3a1d2e863148</td>
      <td>399</td>
      <td>1</td>
      <td>00:08:48.623</td>
      <td>8</td>
      <td>48</td>
      <td>Dribble</td>
      <td>18</td>
      <td>Schalke 04</td>
      <td>Regular Play</td>
      <td>Schalke 04</td>
      <td>Amine Harit</td>
      <td>Center Attacking Midfield</td>
      <td>[88.9, 22.7]</td>
      <td>0.000000</td>
      <td>True</td>
      <td>[93d829df-eea7-416b-95aa-7593828cfade]</td>
      <td>{'outcome': {'id': 8, 'name': 'Complete'}}</td>
      <td>303299</td>
    </tr>
    <tr>
      <th>2</th>
      <td>8a78dce4-998a-4e81-902c-9f3957cebc9d</td>
      <td>460</td>
      <td>1</td>
      <td>00:13:30.202</td>
      <td>13</td>
      <td>30</td>
      <td>Dribble</td>
      <td>23</td>
      <td>Schalke 04</td>
      <td>Regular Play</td>
      <td>Schalke 04</td>
      <td>Daniel Caligiuri</td>
      <td>Right Wing</td>
      <td>[99.5, 68.1]</td>
      <td>0.007309</td>
      <td>True</td>
      <td>[772c5aae-e34e-4364-8a98-7caf7636c90b]</td>
      <td>{'outcome': {'id': 9, 'name': 'Incomplete'}}</td>
      <td>303299</td>
    </tr>
    <tr>
      <th>3</th>
      <td>e44d0122-2f2e-4771-820d-cc326a8b0379</td>
      <td>496</td>
      <td>1</td>
      <td>00:14:10.135</td>
      <td>14</td>
      <td>10</td>
      <td>Dribble</td>
      <td>24</td>
      <td>Schalke 04</td>
      <td>From Throw In</td>
      <td>Schalke 04</td>
      <td>Suat Serdar</td>
      <td>Left Defensive Midfield</td>
      <td>[41.2, 31.7]</td>
      <td>0.000000</td>
      <td>True</td>
      <td>[4de4039f-7efc-461b-b7d6-27c32ec2cd2a]</td>
      <td>{'outcome': {'id': 8, 'name': 'Complete'}}</td>
      <td>303299</td>
    </tr>
    <tr>
      <th>4</th>
      <td>9555afbd-d838-42c9-8f80-be3cd09e4c4a</td>
      <td>793</td>
      <td>1</td>
      <td>00:20:18.409</td>
      <td>20</td>
      <td>18</td>
      <td>Dribble</td>
      <td>33</td>
      <td>Eintracht Frankfurt</td>
      <td>Regular Play</td>
      <td>Eintracht Frankfurt</td>
      <td>Timothy Chandler</td>
      <td>Right Wing Back</td>
      <td>[81.8, 75.7]</td>
      <td>0.000000</td>
      <td>True</td>
      <td>[a5c88cee-6319-4c25-91cd-8a028d8dbfbf]</td>
      <td>{'outcome': {'id': 9, 'name': 'Incomplete'}}</td>
      <td>303299</td>
    </tr>
  </tbody>
</table>



### Competition Events
All events from a given competition can be queried and stored on a single dataframe
```
events = sb.competition_events(
    country="Germany",
    division= "1. Bundesliga",
    season="2019/2020",
    gender="male"
)

grouped_events = sb.competition_events(
    country="Germany",
    division= "1. Bundesliga",
    season="2019/2020",
    split=True
)
grouped_events["dribbles"]
```
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>index</th>
      <th>period</th>
      <th>timestamp</th>
      <th>minute</th>
      <th>second</th>
      <th>type</th>
      <th>possession</th>
      <th>possession_team</th>
      <th>play_pattern</th>
      <th>team</th>
      <th>player</th>
      <th>position</th>
      <th>location</th>
      <th>duration</th>
      <th>under_pressure</th>
      <th>related_events</th>
      <th>dribble</th>
      <th>match_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>b190c01f-ad24-468c-8241-f955b91d996c</td>
      <td>131</td>
      <td>1</td>
      <td>00:02:08.032</td>
      <td>2</td>
      <td>8</td>
      <td>Dribble</td>
      <td>4</td>
      <td>Schalke 04</td>
      <td>Regular Play</td>
      <td>Schalke 04</td>
      <td>Daniel Caligiuri</td>
      <td>Right Wing</td>
      <td>[110.2, 62.9]</td>
      <td>0.000000</td>
      <td>True</td>
      <td>[60f822df-5747-4787-b0f9-45bf5217eb8a]</td>
      <td>{'outcome': {'id': 8, 'name': 'Complete'}}</td>
      <td>303299</td>
    </tr>
    <tr>
      <th>1</th>
      <td>4d773c92-f89f-491e-b3e0-3a1d2e863148</td>
      <td>399</td>
      <td>1</td>
      <td>00:08:48.623</td>
      <td>8</td>
      <td>48</td>
      <td>Dribble</td>
      <td>18</td>
      <td>Schalke 04</td>
      <td>Regular Play</td>
      <td>Schalke 04</td>
      <td>Amine Harit</td>
      <td>Center Attacking Midfield</td>
      <td>[88.9, 22.7]</td>
      <td>0.000000</td>
      <td>True</td>
      <td>[93d829df-eea7-416b-95aa-7593828cfade]</td>
      <td>{'outcome': {'id': 8, 'name': 'Complete'}}</td>
      <td>303299</td>
    </tr>
    <tr>
      <th>2</th>
      <td>8a78dce4-998a-4e81-902c-9f3957cebc9d</td>
      <td>460</td>
      <td>1</td>
      <td>00:13:30.202</td>
      <td>13</td>
      <td>30</td>
      <td>Dribble</td>
      <td>23</td>
      <td>Schalke 04</td>
      <td>Regular Play</td>
      <td>Schalke 04</td>
      <td>Daniel Caligiuri</td>
      <td>Right Wing</td>
      <td>[99.5, 68.1]</td>
      <td>0.007309</td>
      <td>True</td>
      <td>[772c5aae-e34e-4364-8a98-7caf7636c90b]</td>
      <td>{'outcome': {'id': 9, 'name': 'Incomplete'}}</td>
      <td>303299</td>
    </tr>
    <tr>
      <th>3</th>
      <td>e44d0122-2f2e-4771-820d-cc326a8b0379</td>
      <td>496</td>
      <td>1</td>
      <td>00:14:10.135</td>
      <td>14</td>
      <td>10</td>
      <td>Dribble</td>
      <td>24</td>
      <td>Schalke 04</td>
      <td>From Throw In</td>
      <td>Schalke 04</td>
      <td>Suat Serdar</td>
      <td>Left Defensive Midfield</td>
      <td>[41.2, 31.7]</td>
      <td>0.000000</td>
      <td>True</td>
      <td>[4de4039f-7efc-461b-b7d6-27c32ec2cd2a]</td>
      <td>{'outcome': {'id': 8, 'name': 'Complete'}}</td>
      <td>303299</td>
    </tr>
    <tr>
      <th>4</th>
      <td>9555afbd-d838-42c9-8f80-be3cd09e4c4a</td>
      <td>793</td>
      <td>1</td>
      <td>00:20:18.409</td>
      <td>20</td>
      <td>18</td>
      <td>Dribble</td>
      <td>33</td>
      <td>Eintracht Frankfurt</td>
      <td>Regular Play</td>
      <td>Eintracht Frankfurt</td>
      <td>Timothy Chandler</td>
      <td>Right Wing Back</td>
      <td>[81.8, 75.7]</td>
      <td>0.000000</td>
      <td>True</td>
      <td>[a5c88cee-6319-4c25-91cd-8a028d8dbfbf]</td>
      <td>{'outcome': {'id': 9, 'name': 'Incomplete'}}</td>
      <td>303299</td>
    </tr>
  </tbody>
</table>

### 360 Metrics
If you have access to 360 data for a competition, you can set `include_360_metrics=True` in the `events()` and `competition_events()` functions to retrieve 360 metrics such a line breaking passess together with the event data.

The open data does not include the 360 metrics. This is currently only available to customers with a data subscription.

```
events = sb.events(match_id=3837323, include_360_metrics=True)
comp_events = sb.competition_events(
            country="Europe",
            division="Champions League",
            season="2022/2023",
            include_360_metrics=True,
)
comp_events
```
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>50_50</th>
      <th>bad_behaviour_card</th>
      <th>ball_receipt_exceeds_distance</th>
      <th>ball_receipt_in_space</th>
      <th>ball_receipt_outcome</th>
      <th>ball_recovery_offensive</th>
      <th>ball_recovery_recovery_failure</th>
      <th>block_deflection</th>
      <th>block_offensive</th>
      <th>block_save_block</th>
      <th>carry_end_location</th>
      <th>clearance_aerial_won</th>
      <th>clearance_body_part</th>
      <th>clearance_head</th>
      <th>clearance_left_foot</th>
      <th>clearance_other</th>
      <th>clearance_right_foot</th>
      <th>counterpress</th>
      <th>distance_to_nearest_defender</th>
      <th>dribble_no_touch</th>
      <th>dribble_nutmeg</th>
      <th>dribble_outcome</th>
      <th>dribble_overrun</th>
      <th>duel_outcome</th>
      <th>duel_type</th>
      <th>duration</th>
      <th>foul_committed_advantage</th>
      <th>foul_committed_card</th>
      <th>foul_committed_offensive</th>
      <th>foul_committed_penalty</th>
      <th>foul_committed_type</th>
      <th>foul_won_advantage</th>
      <th>foul_won_defensive</th>
      <th>foul_won_penalty</th>
      <th>goalkeeper_body_part</th>
      <th>goalkeeper_end_location</th>
      <th>goalkeeper_lost_in_play</th>
      <th>goalkeeper_lost_out</th>
      <th>goalkeeper_outcome</th>
      <th>goalkeeper_position</th>
      <th>goalkeeper_punched_out</th>
      <th>goalkeeper_shot_saved_off_target</th>
      <th>goalkeeper_shot_saved_to_post</th>
      <th>goalkeeper_success_in_play</th>
      <th>goalkeeper_technique</th>
      <th>goalkeeper_type</th>
      <th>half_start_late_video_start</th>
      <th>id</th>
      <th>index</th>
      <th>injury_stoppage_in_chain</th>
      <th>interception_outcome</th>
      <th>line_breaking_pass</th>
      <th>location</th>
      <th>minute</th>
      <th>miscontrol_aerial_won</th>
      <th>num_defenders_on_goal_side_of_actor</th>
      <th>obv_against_after</th>
      <th>obv_against_before</th>
      <th>obv_against_net</th>
      <th>obv_for_after</th>
      <th>obv_for_before</th>
      <th>obv_for_net</th>
      <th>obv_total_net</th>
      <th>off_camera</th>
      <th>out</th>
      <th>pass_aerial_won</th>
      <th>pass_angle</th>
      <th>pass_assisted_shot_id</th>
      <th>pass_body_part</th>
      <th>pass_cross</th>
      <th>pass_cut_back</th>
      <th>pass_deflected</th>
      <th>pass_end_location</th>
      <th>pass_goal_assist</th>
      <th>pass_height</th>
      <th>pass_inswinging</th>
      <th>pass_length</th>
      <th>pass_miscommunication</th>
      <th>pass_no_touch</th>
      <th>pass_outcome</th>
      <th>pass_outswinging</th>
      <th>pass_recipient</th>
      <th>pass_shot_assist</th>
      <th>pass_straight</th>
      <th>pass_switch</th>
      <th>pass_technique</th>
      <th>pass_through_ball</th>
      <th>pass_type</th>
      <th>pass_xclaim</th>
      <th>period</th>
      <th>play_pattern</th>
      <th>player</th>
      <th>player_id</th>
      <th>player_off_permanent</th>
      <th>position</th>
      <th>possession</th>
      <th>possession_team</th>
      <th>possession_team_id</th>
      <th>related_events</th>
      <th>second</th>
      <th>shot_aerial_won</th>
      <th>shot_body_part</th>
      <th>shot_deflected</th>
      <th>shot_end_location</th>
      <th>shot_first_time</th>
      <th>shot_freeze_frame</th>
      <th>shot_key_pass_id</th>
      <th>shot_one_on_one</th>
      <th>shot_open_goal</th>
      <th>shot_outcome</th>
      <th>shot_redirect</th>
      <th>shot_saved_off_target</th>
      <th>shot_saved_to_post</th>
      <th>shot_statsbomb_xg</th>
      <th>shot_statsbomb_xg2</th>
      <th>shot_technique</th>
      <th>shot_type</th>
      <th>substitution_outcome</th>
      <th>substitution_replacement</th>
      <th>team</th>
      <th>timestamp</th>
      <th>type</th>
      <th>under_pressure</th>
      <th>visible_opponents</th>
      <th>visible_teammates</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>3479244f-8234-43c9-a389-4ce587062b48</td>
      <td>1</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1</td>
      <td>Regular Play</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1</td>
      <td>Real Madrid</td>
      <td>220</td>
      <td>NaN</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Real Madrid</td>
      <td>00:00:00.000</td>
      <td>Starting XI</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>c4f5a51b-741e-4920-ac32-02349b1f2755</td>
      <td>2</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1</td>
      <td>Regular Play</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1</td>
      <td>Real Madrid</td>
      <td>220</td>
      <td>NaN</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Celtic</td>
      <td>00:00:00.000</td>
      <td>Starting XI</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>27be67e7-fdb5-4db9-92b6-8f3214cecec4</td>
      <td>1</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1</td>
      <td>Regular Play</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1</td>
      <td>Juventus</td>
      <td>224</td>
      <td>NaN</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Juventus</td>
      <td>00:00:00.000</td>
      <td>Starting XI</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>819c381e-29c1-4f10-a6c3-acc3181cec14</td>
      <td>2</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1</td>
      <td>Regular Play</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1</td>
      <td>Juventus</td>
      <td>224</td>
      <td>NaN</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Paris Saint-Germain</td>
      <td>00:00:00.000</td>
      <td>Starting XI</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>4</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>e6d42d87-c78a-4286-94fd-4095e9f7b16f</td>
      <td>1</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1</td>
      <td>Regular Play</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1</td>
      <td>Manchester City</td>
      <td>36</td>
      <td>NaN</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Manchester City</td>
      <td>00:00:00.000</td>
      <td>Starting XI</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>

### 360 Frames

The frame functions will return the raw 360 freeze frame data along with the visible area for each frame. This is returned at the player level so you have multiple rows per frame/event_id. 
```
match_frames = sb.frames(match_id=3772072, fmt='dataframe')
comp_frames = sb.competition_frames(
    country="Germany",
    division= "1. Bundesliga",
    season="2019/2020"
)
match_frames
```

<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>actor</th>
      <th>distance_from_edge_of_visible_area</th>
      <th>event_uuid</th>
      <th>keeper</th>
      <th>location</th>
      <th>match_id</th>
      <th>teammate</th>
      <th>visible_area</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>False</td>
      <td>5.183739</td>
      <td>065b15cc-b550-48de-9a1e-a9608d8e6c6d</td>
      <td>False</td>
      <td>[79.14114105224532, 12.646560364129726]</td>
      <td>3855869</td>
      <td>False</td>
      <td>[50.8965834880119, 80.0, 55.8915648466696, 6.76382112514142, 80.0765213141343, 1.48859955554994, 113.056993108772, 80.0, 50.8965834880119, 80.0]</td>
    </tr>
    <tr>
      <th>1</th>
      <td>False</td>
      <td>7.784551</td>
      <td>065b15cc-b550-48de-9a1e-a9608d8e6c6d</td>
      <td>False</td>
      <td>[80.68650097437124, 23.040779651892883]</td>
      <td>3855869</td>
      <td>True</td>
      <td>[50.8965834880119, 80.0, 55.8915648466696, 6.76382112514142, 80.0765213141343, 1.48859955554994, 113.056993108772, 80.0, 50.8965834880119, 80.0]</td>
    </tr>
    <tr>
      <th>2</th>
      <td>False</td>
      <td>8.873694</td>
      <td>065b15cc-b550-48de-9a1e-a9608d8e6c6d</td>
      <td>False</td>
      <td>[80.20033992405365, 24.695673759901382]</td>
      <td>3855869</td>
      <td>False</td>
      <td>[50.8965834880119, 80.0, 55.8915648466696, 6.76382112514142, 80.0765213141343, 1.48859955554994, 113.056993108772, 80.0, 50.8965834880119, 80.0]</td>
    </tr>
    <tr>
      <th>3</th>
      <td>False</td>
      <td>9.738309</td>
      <td>065b15cc-b550-48de-9a1e-a9608d8e6c6d</td>
      <td>False</td>
      <td>[82.43349155444821, 32.24426347120625]</td>
      <td>3855869</td>
      <td>False</td>
      <td>[50.8965834880119, 80.0, 55.8915648466696, 6.76382112514142, 80.0765213141343, 1.48859955554994, 113.056993108772, 80.0, 50.8965834880119, 80.0]</td>
    </tr>
    <tr>
      <th>4</th>
      <td>False</td>
      <td>11.049633</td>
      <td>065b15cc-b550-48de-9a1e-a9608d8e6c6d</td>
      <td>False</td>
      <td>[81.320294294838, 32.98015558905158]</td>
      <td>3855869</td>
      <td>True</td>
      <td>[50.8965834880119, 80.0, 55.8915648466696, 6.76382112514142, 80.0765213141343, 1.48859955554994, 113.056993108772, 80.0, 50.8965834880119, 80.0]</td>
    </tr>
  </tbody>
</table>

### Aggregated Stats

For customers we also provide aggregated statistics at the player-match, player-season and team-season levels. 

```
player_match = sb.player_match_stats(3772072)
player_season = sb.player_season_stats(competition_id=9, season_id=42)
team_match = sb.team_match_stats(3772072)
team_season = sb.team_season_stats(competition_id=9, season_id=42)

player_match
```

<table border=\"1\" class=\"dataframe\">
  <thead>
    <tr style=\"text-align: right;\">
      <th></th>
      <th>player_match_pressures</th>
      <th>player_match_long_balls</th>
      <th>player_match_shot_touch_ratio</th>
      <th>player_match_passes_into_box</th>
      <th>player_match_pressure_duration_avg</th>
      <th>player_match_crossing_ratio</th>
      <th>player_match_op_f3_forward_passes</th>
      <th>player_match_passing_ratio</th>
      <th>team_id</th>
      <th>player_match_successful_passes</th>
      <th>player_match_op_xgbuildup_per_possession</th>
      <th>player_match_op_xgchain</th>
      <th>player_match_op_passes_into_box</th>
      <th>player_match_deep_progressions</th>
      <th>player_match_turnovers</th>
      <th>player_match_counterpressured_action_fails</th>
      <th>player_match_passes</th>
      <th>player_match_key_passes</th>
      <th>player_match_dispossessions</th>
      <th>player_match_penalties_won</th>
      <th>player_match_through_balls</th>
      <th>team_name</th>
      <th>player_match_op_passes</th>
      <th>player_match_dribbles</th>
      <th>player_match_clearances</th>
      <th>player_match_forward_passes</th>
      <th>player_match_np_xg_per_shot</th>
      <th>player_match_counterpressures</th>
      <th>player_id</th>
      <th>player_match_op_xa</th>
      <th>player_match_op_xgchain_per_possession</th>
      <th>player_match_minutes</th>
      <th>player_match_pressured_long_balls</th>
      <th>player_match_op_f3_sideways_passes</th>
      <th>player_match_dribbles_faced</th>
      <th>player_match_np_xg</th>
      <th>player_match_goals</th>
      <th>player_match_op_key_passes</th>
      <th>player_match_aerial_ratio</th>
      <th>player_match_op_shots</th>
      <th>player_match_successful_crosses</th>
      <th>player_match_shots_blocked</th>
      <th>player_match_op_f3_passes</th>
      <th>player_match_op_assists</th>
      <th>player_match_long_ball_ratio</th>
      <th>account_id</th>
      <th>player_match_np_shots</th>
      <th>player_match_challenge_ratio</th>
      <th>player_match_touches</th>
      <th>player_match_pressure_regains</th>
      <th>player_match_crosses_into_box</th>
      <th>player_match_fouls</th>
      <th>player_match_sideways_passes</th>
      <th>player_match_aerials</th>
      <th>player_match_touches_inside_box</th>
      <th>player_match_counterpressure_duration_total</th>
      <th>player_match_successful_aerials</th>
      <th>player_match_box_cross_ratio</th>
      <th>player_match_xgbuildup_per_possession</th>
      <th>player_match_dribbled_past</th>
      <th>player_match_pressure_duration_total</th>
      <th>player_match_op_xgbuildup</th>
      <th>player_match_np_shots_on_target</th>
      <th>player_match_interceptions</th>
      <th>player_match_counterpressure_duration_avg</th>
      <th>player_match_xgchain_per_possession</th>
      <th>player_match_successful_long_balls</th>
      <th>player_match_op_f3_backward_passes</th>
      <th>player_match_xgchain</th>
      <th>player_match_tackles</th>
      <th>player_match_assists</th>
      <th>player_match_sp_xa</th>
      <th>player_match_aggressive_actions</th>
      <th>player_name</th>
      <th>player_match_xa</th>
      <th>match_id</th>
      <th>player_match_passes_inside_box</th>
      <th>player_match_possession</th>
      <th>player_match_pressured_action_fails</th>
      <th>player_match_crosses</th>
      <th>player_match_fouls_won</th>
      <th>player_match_xgbuildup</th>
      <th>player_match_backward_passes</th>
      <th>player_match_unpressured_long_balls</th>
      <th>player_match_np_goals</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>NaN</td>
      <td>10</td>
      <td>0.000000</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0</td>
      <td>0.842105</td>
      <td>870</td>
      <td>32</td>
      <td>0.003191</td>
      <td>0.105292</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>NaN</td>
      <td>38</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>Arminia Bielefeld</td>
      <td>33</td>
      <td>0</td>
      <td>0</td>
      <td>9</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>9194</td>
      <td>0.000000</td>
      <td>0.003191</td>
      <td>94.21667</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0.000000</td>
      <td>0</td>
      <td>0</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0.600000</td>
      <td>48</td>
      <td>0</td>
      <td>NaN</td>
      <td>65</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>29</td>
      <td>0</td>
      <td>0</td>
      <td>NaN</td>
      <td>0</td>
      <td>NaN</td>
      <td>0.003191</td>
      <td>0</td>
      <td>NaN</td>
      <td>0.105292</td>
      <td>0</td>
      <td>0</td>
      <td>NaN</td>
      <td>0.003191</td>
      <td>6</td>
      <td>0</td>
      <td>0.105292</td>
      <td>0</td>
      <td>0</td>
      <td>0.000000</td>
      <td>0</td>
      <td>Stefan Ortega</td>
      <td>0.000000</td>
      <td>3772072</td>
      <td>0</td>
      <td>0.491135</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0.105292</td>
      <td>0</td>
      <td>9</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>8.0</td>
      <td>0</td>
      <td>0.033333</td>
      <td>0</td>
      <td>0.570626</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.812500</td>
      <td>870</td>
      <td>13</td>
      <td>0.003726</td>
      <td>0.160582</td>
      <td>0</td>
      <td>1</td>
      <td>3</td>
      <td>0.0</td>
      <td>16</td>
      <td>1</td>
      <td>3</td>
      <td>0</td>
      <td>0</td>
      <td>Arminia Bielefeld</td>
      <td>10</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>0.034737</td>
      <td>1.0</td>
      <td>9210</td>
      <td>0.043881</td>
      <td>0.007299</td>
      <td>91.90000</td>
      <td>1</td>
      <td>4</td>
      <td>0</td>
      <td>0.034737</td>
      <td>0</td>
      <td>1</td>
      <td>0.285714</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>6</td>
      <td>0</td>
      <td>NaN</td>
      <td>48</td>
      <td>1</td>
      <td>1.0</td>
      <td>30</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>10</td>
      <td>7</td>
      <td>5</td>
      <td>0.327541</td>
      <td>2</td>
      <td>NaN</td>
      <td>0.003726</td>
      <td>0</td>
      <td>4.565010</td>
      <td>0.081964</td>
      <td>0</td>
      <td>0</td>
      <td>0.327541</td>
      <td>0.007299</td>
      <td>0</td>
      <td>2</td>
      <td>0.160582</td>
      <td>1</td>
      <td>0</td>
      <td>0.000000</td>
      <td>9</td>
      <td>Fabian Klos</td>
      <td>0.043881</td>
      <td>3772072</td>
      <td>1</td>
      <td>0.491135</td>
      <td>0.0</td>
      <td>1</td>
      <td>1</td>
      <td>0.081964</td>
      <td>6</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>7.0</td>
      <td>13</td>
      <td>0.000000</td>
      <td>1</td>
      <td>1.795411</td>
      <td>0.0</td>
      <td>1</td>
      <td>0.852941</td>
      <td>190</td>
      <td>58</td>
      <td>0.017993</td>
      <td>0.773687</td>
      <td>0</td>
      <td>3</td>
      <td>0</td>
      <td>0.0</td>
      <td>68</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>Union Berlin</td>
      <td>60</td>
      <td>0</td>
      <td>2</td>
      <td>4</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>9164</td>
      <td>0.000000</td>
      <td>0.017993</td>
      <td>94.21667</td>
      <td>2</td>
      <td>3</td>
      <td>0</td>
      <td>0.000000</td>
      <td>0</td>
      <td>0</td>
      <td>0.666667</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>4</td>
      <td>0</td>
      <td>0.615385</td>
      <td>48</td>
      <td>0</td>
      <td>1.0</td>
      <td>122</td>
      <td>1</td>
      <td>0</td>
      <td>2</td>
      <td>51</td>
      <td>3</td>
      <td>0</td>
      <td>NaN</td>
      <td>2</td>
      <td>0.0</td>
      <td>0.017993</td>
      <td>0</td>
      <td>12.567875</td>
      <td>0.773687</td>
      <td>0</td>
      <td>1</td>
      <td>NaN</td>
      <td>0.019504</td>
      <td>8</td>
      <td>0</td>
      <td>0.838693</td>
      <td>2</td>
      <td>0</td>
      <td>0.043227</td>
      <td>11</td>
      <td>Christopher Trimmel</td>
      <td>0.043227</td>
      <td>3772072</td>
      <td>0</td>
      <td>0.508865</td>
      <td>0.0</td>
      <td>1</td>
      <td>0</td>
      <td>0.773687</td>
      <td>13</td>
      <td>13</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>3.0</td>
      <td>4</td>
      <td>0.013699</td>
      <td>1</td>
      <td>0.744943</td>
      <td>NaN</td>
      <td>1</td>
      <td>0.777778</td>
      <td>870</td>
      <td>35</td>
      <td>0.002196</td>
      <td>0.090022</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>0.0</td>
      <td>45</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>Arminia Bielefeld</td>
      <td>40</td>
      <td>0</td>
      <td>1</td>
      <td>18</td>
      <td>0.019468</td>
      <td>0.0</td>
      <td>24343</td>
      <td>0.000000</td>
      <td>0.002196</td>
      <td>94.21667</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>0.019468</td>
      <td>0</td>
      <td>0</td>
      <td>0.000000</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>2</td>
      <td>0</td>
      <td>0.750000</td>
      <td>48</td>
      <td>1</td>
      <td>NaN</td>
      <td>73</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>22</td>
      <td>1</td>
      <td>1</td>
      <td>NaN</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.003043</td>
      <td>0</td>
      <td>2.234830</td>
      <td>0.090022</td>
      <td>0</td>
      <td>0</td>
      <td>NaN</td>
      <td>0.003043</td>
      <td>3</td>
      <td>0</td>
      <td>0.124760</td>
      <td>0</td>
      <td>0</td>
      <td>0.000000</td>
      <td>3</td>
      <td>Jacob Laursen</td>
      <td>0.000000</td>
      <td>3772072</td>
      <td>0</td>
      <td>0.491135</td>
      <td>0.0</td>
      <td>0</td>
      <td>1</td>
      <td>0.124760</td>
      <td>5</td>
      <td>4</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>14.0</td>
      <td>6</td>
      <td>0.000000</td>
      <td>0</td>
      <td>0.592216</td>
      <td>NaN</td>
      <td>0</td>
      <td>0.763158</td>
      <td>870</td>
      <td>29</td>
      <td>0.006048</td>
      <td>0.211669</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0.0</td>
      <td>38</td>
      <td>0</td>
      <td>2</td>
      <td>0</td>
      <td>0</td>
      <td>Arminia Bielefeld</td>
      <td>36</td>
      <td>0</td>
      <td>1</td>
      <td>7</td>
      <td>NaN</td>
      <td>2.0</td>
      <td>9204</td>
      <td>0.000000</td>
      <td>0.006048</td>
      <td>94.21667</td>
      <td>1</td>
      <td>1</td>
      <td>3</td>
      <td>0.000000</td>
      <td>0</td>
      <td>0</td>
      <td>0.500000</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>1.000000</td>
      <td>48</td>
      <td>0</td>
      <td>0.0</td>
      <td>64</td>
      <td>1</td>
      <td>0</td>
      <td>4</td>
      <td>29</td>
      <td>2</td>
      <td>0</td>
      <td>0.676610</td>
      <td>1</td>
      <td>NaN</td>
      <td>0.006048</td>
      <td>3</td>
      <td>8.291025</td>
      <td>0.211669</td>
      <td>0</td>
      <td>2</td>
      <td>0.338305</td>
      <td>0.006048</td>
      <td>6</td>
      <td>0</td>
      <td>0.211669</td>
      <td>0</td>
      <td>0</td>
      <td>0.000000</td>
      <td>18</td>
      <td>Manuel Prietl</td>
      <td>0.000000</td>
      <td>3772072</td>
      <td>0</td>
      <td>0.491135</td>
      <td>0.0</td>
      <td>0</td>
      <td>1</td>
      <td>0.211669</td>
      <td>2</td>
      <td>6</td>
      <td>0</td>
    </tr>
  </tbody>
</table>

### Raw Files
Alternatively, entities can be accessed as python dictionaries serving as an interface to raw jsons and without performing any preprocessing
```

sb.competitions(fmt="dict")

sb.matches(competition_id=9, season_id=42, fmt="dict")

sb.lineups(match_id=303299, fmt="dict")

sb.events(303299, fmt="dict")

sb.competition_events(
    country="Germany",
    division= "1. Bundesliga",
    season="2019/2020",
    gender="male",
    fmt="dict"
)

sb.frames(3772072, fmt="dict")

sb.competition_frames(
    country="Germany",
    division= "1. Bundesliga",
    season="2021/2022",
    gender="male",
    fmt="dict"
)

sb.player_match_stats(3772072, fmt="dict")

sb.player_season_stats(competition_id=9, season_id=42, fmt="dict")

sb.team_match_stats(3772072, fmt="dict")

sb.team_season_stats(competition_id=9, season_id=42, fmt="dict")

```

================
File: statsbombpy-master/setup.py
================
import os

from setuptools import setup

with open(os.path.join(os.path.abspath(os.path.dirname(__file__)), "README.md")) as f:
    README = f.read()

setup(
    name="statsbombpy",
    version="1.14.0",
    description="easily stream StatsBomb data into Python",
    long_description=README,
    long_description_content_type="text/markdown",
    url="https://github.com/statsbomb/statsbombpy",
    author="StatsBomb",
    author_email="support@statsbombservices.com",
    packages=["statsbombpy"],
    install_requires=[
        "pandas",
        "requests",
        "requests-cache",
        "inflect",
        "joblib",
    ],
    extras_require={
        'dev': [
            "nose2",
        ]
    },
)

================
File: .gitignore
================
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Ignore settings file
mysite/settings.py  # Replace with the path to your settings file if different

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
.myenv
env/
venv/
myenv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Personal
docs/
repomix-output.txt

================
File: README.md
================
# Football Analytics Platform

A comprehensive web application for football/soccer analytics, leveraging StatsBomb data to provide insights, match analysis, and performance statistics.


## Overview

This platform combines StatsBomb's rich football data with interactive visualizations and analytics tools to provide:

- League standings and statistics
- Match analysis and event tracking
- Player performance metrics
- Touch and event visualization on an interactive pitch
- Team statistics and comparisons

## Features

### 🏆 League Management
- View and track multiple leagues
- Real-time standings updates
- Team performance tracking
- Season comparisons

### ⚽ Match Analysis
- Detailed match events
- Player touch mapping
- Shot and pass visualization
- Team statistics

### 📊 Data Visualization
- Interactive football pitch
- Event heatmaps
- Performance metrics
- Statistical comparisons

### 🔄 Live Updates
- Automatic data synchronization
- Real-time standings updates
- Match event tracking

## Technology Stack

### Backend
- Django/Django REST Framework
- StatsBomb Python API
- SQLite Database
- Python 3.8+

### Frontend
- React
- React Router
- Bootstrap
- Custom CSS
